<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>William</title>
  
  <subtitle>不管走了多远都不要忘记为什么出发</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://william-hl1991.github.io/"/>
  <updated>2020-04-22T06:54:19.411Z</updated>
  <id>https://william-hl1991.github.io/</id>
  
  <author>
    <name>William</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS内存泄露原因分析</title>
    <link href="https://william-hl1991.github.io/2018/08/10/iOS%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/"/>
    <id>https://william-hl1991.github.io/2018/08/10/iOS%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/</id>
    <published>2018-08-10T05:18:05.000Z</published>
    <updated>2020-04-22T06:54:19.411Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;去年大致同期就研究过<a href="http://wereadteam.github.io/2016/07/20/MLeaksFinder2/" target="_blank" rel="noopener">MLeaksFinder</a>和<a href="https://github.com/facebook/FBRetainCycleDetector" target="_blank" rel="noopener">FBRetainCycleDetector</a>两个关于iOS内存泄漏的监控工具。前者的思路是：通常一个 UIViewController 在被 pop 之后将会很快被释放，假设在 pop 3 秒钟之后仍然没有被释放，则可以认为这个 UIViewController 存在泄漏的问题。在后续的更新版本中，MLeaksFinder 也依赖了 Facebook 的FBRetainCycleDetector来辅助判断内存泄漏是否是由循环引用引起的。后者的原理是在 Objective-C 中检测循环引用可以抽象为在一个节点为对象，边为对象之间的引用关系的有向无环图（DAG 图）中寻找存在的环。当所有的 Objective-C 对象已经在我们的有向无环图中时，我们所需要做的就是通过深度优先搜索算法来遍历它，并找到循环节点。关于FBRetainCycleDetector的详细解释实践参考该博客<a href="https://draveness.me/retain-cycle1" target="_blank" rel="noopener">《如何在 iOS 中解决循环引用的问题》</a>。</p><a id="more"></a><h1 id="内存泄漏和内存溢出"><a href="#内存泄漏和内存溢出" class="headerlink" title="内存泄漏和内存溢出"></a>内存泄漏和内存溢出</h1><ol><li>内存溢出(out of memory)： 是指程序在申请内存时，没有足够的内存空间供其使用，出现out of memory。通俗理解就是内存不够。例如在运行大型软件或游戏时，软件或游戏所需要的内存远远超出了你主机内安装的内存所承受大小，就叫内存溢出。</li><li>内存泄漏(memory leak)： 是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存，到最后都会被消耗完，产生闪退。</li></ol><h1 id="排查内存泄漏"><a href="#排查内存泄漏" class="headerlink" title="排查内存泄漏"></a>排查内存泄漏</h1><p>&ensp;&ensp;iOS开发中对内存管理的要求非常严格，一旦存在内存泄漏，很容易导致程序非常容易崩溃。尽管目前iOS开发基本上都是采用的ARC方式进行内存管理，但是稍不注意就会存在内存泄漏的问题。简单的定位内存泄漏的问题可以采用：静态分析方法（Analyze）和动态分析方法（Instrument的leak）。</p><h2 id="1-1-静态分析方法"><a href="#1-1-静态分析方法" class="headerlink" title="1.1 静态分析方法"></a>1.1 静态分析方法</h2><p>&ensp;&ensp;通过xcode自带的Analyze进行静态内存泄露分析。静态分析方法能发现大部分的问题，但是只能是静态分析结果，还有一些动态分配内存的情形并没有进行分析。所以仅仅使用静态内存泄漏分析得到的结果并不是非常可靠。</p><h2 id="1-2-动态内存泄露分析方法"><a href="#1-2-动态内存泄露分析方法" class="headerlink" title="1.2 动态内存泄露分析方法"></a>1.2 动态内存泄露分析方法</h2><p>&ensp;&ensp;分析内存泄露不能把所有的内存泄露查出来，有的内存泄露是在运行时，用户操作时才产生的。在Instruments中选择Leaks工具选项，由于leaks是动态监测，所以手动进行一系列操作，可检查项目中是否存在内存泄漏问题。选中Leaks Checks,在Details所在栏中选择CallTree,并且在右下角勾选Invert Call Tree 和Hide System Libraries，会发现显示若干行代码，双击即可跳转到出现内存泄漏的地方。</p><h2 id="1-3-覆盖不完全"><a href="#1-3-覆盖不完全" class="headerlink" title="1.3 覆盖不完全"></a>1.3 覆盖不完全</h2><p>&ensp;&ensp;在 MRC 时代 Leaked memory 很常见，因为很容易忘了调用 release，但在 ARC 时代更常见的内存泄露是循环引用导致的 Abandoned memory，Leaks 工具查不出这类内存泄露，应用有限。</p><blockquote><p>WeRead在MLeaksFinder：精准 iOS 内存泄露检测工具中对Allocations做了总结：不断重复 push 和 pop 同一个 UIViewController，理论上来说，push 之前跟 pop 之后，app 会回到相同的状态。因此，在 push 过程中新分配的内存，在 pop 之后应该被 dealloc 掉，除了前几次 push 可能有预热数据和 cache 数据的情况。如果在数次 push 跟 pop 之后，内存还不断增长，则有内存泄露。用这种方法来发现内存泄露还是很不方便的：  </p><ul><li>首先，你得打开 Allocations  </li><li>其次，你得一个个场景去重复的操作,无法及时得知泄露，得专门做一遍上述操作，十分繁琐</li></ul></blockquote><h1 id="内存泄露的原因分析"><a href="#内存泄露的原因分析" class="headerlink" title="内存泄露的原因分析"></a>内存泄露的原因分析</h1><h2 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h2><p>&ensp;&ensp;Objective-C 使用引用计数来管理内存与释放未被引用的对象。内存中的对象 A 可以让对象 B 的引用计数加一，即 retain，来使对象 B 尽可能久地存在内存中（只要对象 A 不对它“减一”，即 release）。也就是说：对象 A 持有了对象 B 。<br>大多数情况下，引用计数这套机制都可以运作得很好。但是，当两个对象直接地，或者更常见的情形是通过某些对象间接地，互相持有了对方，这个时候就陷入了僵局了。这种互相持有对方的引用的现象叫做循环引用。<br>循环引用会导致一系列的问题。最好的情况是，泄漏的对象本身就会一直长期地占用内存空间，这种情况一般不会造成太大的内存消耗。如果泄漏的对象不停地增加与积累，那么 App 中其他功能模块所能使用的内存就会减少。最坏的情况则是，内存泄漏导致了 App 需要使用的内存超出了限制，这时应用就会闪退了。</p><h2 id="UIViewController是否dismiss"><a href="#UIViewController是否dismiss" class="headerlink" title="UIViewController是否dismiss"></a>UIViewController是否dismiss</h2><p>&ensp;&ensp;当一个 UIViewController 被 pop 或 dismiss 后，该 UIViewController 包括它的 view，view 的 subviews 等等将很快被释放。于是，我们只需在一个 ViewController 被 pop 或 dismiss 一小段时间后，看看该 UIViewController，它的 view，view 的 subviews 等等是否还存在。</p><h2 id="ViewController中存在NSTimer"><a href="#ViewController中存在NSTimer" class="headerlink" title="ViewController中存在NSTimer"></a>ViewController中存在NSTimer</h2><p>&ensp;&ensp;如果你的ViewController中有NSTimer，那么你就要注意了，因为当你调用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(updateTime:) userInfo:nil repeats:YES];</span><br></pre></td></tr></table></figure><p>上面代码中的target：self就增加了ViewController的return count，如果你不将这个timer invalidate，将别想调用dealloc。</p><h2 id="ViewController中的代理delegate"><a href="#ViewController中的代理delegate" class="headerlink" title="ViewController中的代理delegate"></a>ViewController中的代理delegate</h2><p>&ensp;&ensp;一个比较隐秘的因素，你去找找与这个类有关的代理，有没有强引用属性。如果你这个VC需要外部传某个Delegate进来，来通过Delegate+protocol的方式传参数给其他对象，那么这个delegate一定不要强引用，尽量assign或者weak，否则你的VC会持续持有这个delegate，直到它自身被释放。</p><h2 id="ViewController中Block"><a href="#ViewController中Block" class="headerlink" title="ViewController中Block"></a>ViewController中Block</h2><p>&ensp;&ensp;这个可能就是经常容易犯的一个问题了，Block体内使用实例变量也会造成循环引用，使得拥有这个实例的对象不能释放。因为该block本来就是当前viewcontroller的一部分，现在盖子部门又强引用self，导致循环引用无法释放。 例如你这个类叫OneViewController,有个属性是NSString name; 如果你在block体中使用了self.name，或者_name，那样子的话这个类就没法释放。 要解决这个问题其实很简单，就是在block之前申明当前的self引用为弱引用即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; MRC下代码如下</span><br><span class="line">__block Viewcontroller weakSelf &#x3D; self;</span><br><span class="line">&#x2F;&#x2F; ARC下代码如下</span><br><span class="line">__weak Viewcontroller *weakSelf &#x3D; self;</span><br></pre></td></tr></table></figure><h2 id="ViewController的子视图对self的持有"><a href="#ViewController的子视图对self的持有" class="headerlink" title="ViewController的子视图对self的持有"></a>ViewController的子视图对self的持有</h2><p>&ensp;&ensp;这个问题也是我们的项目中内存泄漏的问题所在。有时候需要在子视图或者某个cell中点击跳转等操作，需要在子视图或cell中持有当前的ViewController对象，这样跳转之后的back键才能直接返回该页面，同时也不销毁当前ViewController。此时，你就要注意在子视图或者cell中对当前页面的持有对象不能是强引用，尽量assign或者weak，否则会造成循环引用，内存无法释放。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp;&amp;ensp;去年大致同期就研究过&lt;a href=&quot;http://wereadteam.github.io/2016/07/20/MLeaksFinder2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MLeaksFinder&lt;/a&gt;和&lt;a href=&quot;https://github.com/facebook/FBRetainCycleDetector&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FBRetainCycleDetector&lt;/a&gt;两个关于iOS内存泄漏的监控工具。前者的思路是：通常一个 UIViewController 在被 pop 之后将会很快被释放，假设在 pop 3 秒钟之后仍然没有被释放，则可以认为这个 UIViewController 存在泄漏的问题。在后续的更新版本中，MLeaksFinder 也依赖了 Facebook 的FBRetainCycleDetector来辅助判断内存泄漏是否是由循环引用引起的。后者的原理是在 Objective-C 中检测循环引用可以抽象为在一个节点为对象，边为对象之间的引用关系的有向无环图（DAG 图）中寻找存在的环。当所有的 Objective-C 对象已经在我们的有向无环图中时，我们所需要做的就是通过深度优先搜索算法来遍历它，并找到循环节点。关于FBRetainCycleDetector的详细解释实践参考该博客&lt;a href=&quot;https://draveness.me/retain-cycle1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《如何在 iOS 中解决循环引用的问题》&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://william-hl1991.github.io/categories/iOS/"/>
    
    
      <category term="iOS技术 - iOS - 内存" scheme="https://william-hl1991.github.io/tags/iOS%E6%8A%80%E6%9C%AF-iOS-%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>使用iOS诊断进行iOS电量测试</title>
    <link href="https://william-hl1991.github.io/2018/03/01/%E4%BD%BF%E7%94%A8iOS%E8%AF%8A%E6%96%AD%E8%BF%9B%E8%A1%8CiOS%E7%94%B5%E9%87%8F%E6%B5%8B%E8%AF%95/"/>
    <id>https://william-hl1991.github.io/2018/03/01/%E4%BD%BF%E7%94%A8iOS%E8%AF%8A%E6%96%AD%E8%BF%9B%E8%A1%8CiOS%E7%94%B5%E9%87%8F%E6%B5%8B%E8%AF%95/</id>
    <published>2018-03-01T05:18:05.000Z</published>
    <updated>2020-04-22T07:23:39.687Z</updated>
    
    <content type="html"><![CDATA[<p>长久以来iOS上的电量测试相关信息都是很单一，唯一能获取电量详细信息的私有接口也在iOS9中被苹果官方封掉了。传统方案获取电量的路几乎在新的系统版本下被堵死，使得我们不得不寻求新的电量获取方式。</p><a id="more"></a><h1 id="什么是iOS-Diagnostics"><a href="#什么是iOS-Diagnostics" class="headerlink" title="什么是iOS Diagnostics"></a>什么是iOS Diagnostics</h1><p>iOS diagnostics 是iOS本身自带的诊断系统，在这个诊断系统中包含电量的相关信息记录，这些信息以Sqlite的形式保存，并定期传给苹果服务器，以供苹果相关人员分析。由此可以通过读取iOS系统记录的数据来进行电量测试，这个数据由iOS系统提供，并且记录了每个app的耗电量，故可以得到比较准确的耗电量信息。</p><h1 id="如何通过诊断测试具体的耗电量"><a href="#如何通过诊断测试具体的耗电量" class="headerlink" title="如何通过诊断测试具体的耗电量"></a>如何通过诊断测试具体的耗电量</h1><p>测试过程中需要注意的点</p><ul><li><p>为保证测试的准确性尽量不要开启其他应用（系统应用除外）</p></li><li><p>记录下操作时间和对应的业务场景（用于还原业务对应的耗电量）</p></li><li><p>最好使用iOS10及以上的设备（便于收集电量数据）</p><h2 id="iOS10及以上的设备"><a href="#iOS10及以上的设备" class="headerlink" title="iOS10及以上的设备"></a>iOS10及以上的设备</h2></li></ul><ol><li>使用开发者账号下载profile证书，<a href="https://developer.apple.com/services-account/download?path=/iOS/iOS_Logs/BatteryLife.mobileconfig" target="_blank" rel="noopener">链接</a>。通过Airdrop安装到手机上。<ol start="2"><li>正常进行测试，记录下业务场景对应时间点。</li><li>静置半个小时左右，通过iTunes同步到电脑。<br>在电脑上对应的目录如下：</li></ol></li></ol><p><code>macos:~/Library/Logs/CrashReporter/MobileDevice/[Your_Device_Name]/</code></p><p><code>Windows:C:\Users\[Your_User_Name]\AppData\Roaming\AppleComputer\Logs\CrashReporter\MobileDevice\ [Your_Device_Name]\</code></p><ol start="4"><li>电量数据库以”Powerlog_”开头，以”.PLSQL”<br>或者”.PLSQL.gz”结尾。</li></ol><h2 id="iOS10以下的设备"><a href="#iOS10以下的设备" class="headerlink" title="iOS10以下的设备"></a>iOS10以下的设备</h2><p>提供一个思路：可以通过 mitmproxy + diags://123456拦截接口的形式获得，接口：<a href="https://iosdiags.apple.com/ios/TestConfiguration/1.2" target="_blank" rel="noopener">https://iosdiags.apple.com/ios/TestConfiguration/1.2</a></p><h1 id="电量数据库的解读与分析"><a href="#电量数据库的解读与分析" class="headerlink" title="电量数据库的解读与分析"></a>电量数据库的解读与分析</h1><style><br>table tr:hover {<br>    background: #efefef;<br>}<br>table td:nth-child(1) {<br>    word-wrap:break-word;<br>}<br>table td:nth-child(2) {<br>    word-wrap:break-word;<br>}<br>table td:nth-child(3) {<br>    word-wrap:break-word;<br>}<br></style><table><thead><tr><th>表名</th><th>记录内容</th><th>使用意义</th></tr></thead><tbody><tr><td>PLAccountingOperator_EventNone_Nodes</td><td>记录了所有应用的noteID</td><td>得到系统应用和安装应用</td></tr><tr><td>PLAccountingOperator_Aggregate_RootNodeEnergy</td><td>记录了每个noteID的电量消耗</td><td>统计各个引用的耗电量</td></tr><tr><td>PLAppTimeService_Aggregate_AppRunTime</td><td>记录了app的运行状态，一小时记录一次</td><td>找到被测应用的运行时间段</td></tr><tr><td>PLBatteryAgent_EventBackward_Battery</td><td>记录了整机的电量变化，20秒记录一次（电压、电流、温度等等</td><td>详细电量的统计来源</td></tr><tr><td>PLIOReportAgent_EventBackward_EnergyModel</td><td>记录了IO相关的电量消耗（SoC、DRAM、IPS等等）</td><td>系统底层硬件的耗电量</td></tr><tr><td>PLSpringBoardAgent_Aggregate_SBNotifications_Aggregat</td><td>记录了推送通知的时间和数量</td><td>推送对耗电的影响</td></tr><tr><td>PLLocationAgent_EventForward_ClientStatus</td><td>定位的相关信息</td><td>定位信息对耗电的影响</td></tr></tbody></table><p>综合上面的表数据库我们可以精确获取到app在某个时间段的电量消耗，一次记录下操作场景的时间段，之后通过读取数据库的数据，就可以精确获取该场景在该机器上的电量消耗情况。</p><p>通过PLAppTimeService_Aggregate_AppRunTim 表获取到app的运行情况，然后根据app运行的情况PLAccountingOperator_Aggregate_RootNodeEne这个表获取到app的电量消耗情况。依据这里的耗电情况算出每个部分的耗电百分比，然后通过PLBatteryAgent_EventBackward_Battery可以获得此事件的详细耗电量（公式：W=UIt）。</p><h1 id="iOS诊断耗电量测试总结"><a href="#iOS诊断耗电量测试总结" class="headerlink" title="iOS诊断耗电量测试总结"></a>iOS诊断耗电量测试总结</h1><p>首先装上对应的system debug证书，然后开始执行日常测试，记录下哪个时间段对应的是哪个场景，执行测试完成后，取下系统的电量数据库，对该次测试的各个场景的耗电量做一个全面的评价。</p><h1 id="电量优化的方案"><a href="#电量优化的方案" class="headerlink" title="电量优化的方案"></a>电量优化的方案</h1><ol><li>合理使用NSDateFormatter 和 NSCalendar这种高开销对象<br>性能测试表明，NSDateFormatter的性能瓶颈是由于NSDate格式到NSString格式的转化，所以把NSDateFormatter创建单例意义不大。推荐的做法是，把最常用到的日期格式做缓存。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">static NSDateFormatter *cachedDateFormatter &#x3D;nil;</span><br><span class="line"> + (NSDateFormatter *)cachedDateFormatter &#123;</span><br><span class="line">     if(!dateFormatter)&#123;</span><br><span class="line">       dateFormatter &#x3D; [[NSDateFormatter alloc] init];</span><br><span class="line">       [dateFormatter setDateFormat: @“YYYY-MM-dd HH:mm:ss”];</span><br><span class="line">     &#125;</span><br><span class="line">     return dataFormatter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>不要频繁的刷新页面，尽量不要使用reloadData。</li><li>图片处理<ul><li>图片与imageView相同大小，避免多余运算</li><li>可以使用整幅的图片，增加应用体积，但是节省CPU消耗</li><li>可调整大小的图片，可以省去一些不必要的空间</li><li>CALayer,CoreGraphics,甚至OpenGL来绘制，消耗CPU</li></ul></li><li>选择正确的集合<ul><li>NSArray，使用index来查找很快（插入和删除很慢）</li><li>字典，使用键来查找很快</li><li>NSSets，是无序的，用键查找很快，插入/删除很快</li></ul></li><li>懒加载，不要一次性创建所有的subview，而是需要时才创建</li><li>进行必要的缓存</li><li>尽量减少透明或者半透明，会产生额外的运算</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;长久以来iOS上的电量测试相关信息都是很单一，唯一能获取电量详细信息的私有接口也在iOS9中被苹果官方封掉了。传统方案获取电量的路几乎在新的系统版本下被堵死，使得我们不得不寻求新的电量获取方式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://william-hl1991.github.io/categories/iOS/"/>
    
    
      <category term="iOS技术 - iOS - 电量" scheme="https://william-hl1991.github.io/tags/iOS%E6%8A%80%E6%9C%AF-iOS-%E7%94%B5%E9%87%8F/"/>
    
  </entry>
  
</feed>

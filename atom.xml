<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>William</title>
  
  <subtitle>不管走了多远都不要忘记为什么出发</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://william-hl1991.github.io/"/>
  <updated>2020-04-22T12:02:40.264Z</updated>
  <id>https://william-hl1991.github.io/</id>
  
  <author>
    <name>William</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android 中的线程和线程池</title>
    <link href="https://william-hl1991.github.io/2020/01/10/Android-%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>https://william-hl1991.github.io/2020/01/10/Android-%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0/</id>
    <published>2020-01-10T09:15:01.000Z</published>
    <updated>2020-04-22T12:02:40.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-中的线程和线程池"><a href="#Android-中的线程和线程池" class="headerlink" title="Android 中的线程和线程池"></a>Android 中的线程和线程池</h1><p>我们知道线程是CPU调度的最小单位。在Android中主线程是不能够做耗时操作的，子线程是不能够更新UI的。在Android中，除了Thread外，扮演线程的角色有很多，如AsyncTask,IntentService和HandlerThread等等。良好的线程使用习惯有助于减少 app 出现崩溃和性能开销的风险，接下来介绍一下线程池的使用。</p><h2 id="线程池的好处"><a href="#线程池的好处" class="headerlink" title="线程池的好处"></a>线程池的好处</h2><p>不知道大家有没有遇到过这种情况。我们在写项目，遇到耗时操作的时候，怎么办呢，是不是<code>new Thread().start</code>，那这样的话，整个项目中得<code>new</code>多少个<code>Thread</code>。这种明显是很浪费性能。那么有没有一种可以方法对线程进行复用呢？答案就是线程池。</p><p>先说一下线程池的好处：</p><ul><li>重用线程池中的线程，避免因为线程的创建和销毁带来的性能开销。</li><li>能有效的控制线程池中的线程并发数，避免大量线程之间因为互相抢占资源而导致的阻塞现象。</li><li>能够对线程进行简单的管理，并提供定时执行以及指定间隔循环执行等功能。<a id="more"></a></li></ul><h2 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a><code>ThreadPoolExecutor</code></h2><p>Android中的线程池概念是来源于java中<code>Executor</code>，<code>Executor</code>是一个空的接口，真正的线程池实现<code>ThreadPoolExecutor</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                              ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, defaultHandler);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>简单介绍一下ThreadPoolExcutor各个参数的含义：</p><ul><li><p><code>corePoolSize</code>：线程池的核心线程数，默认情况下，核心线程会在线程池中一直存活，即使他们处于闲置状态。当我们把<code>ThreadPoolExecutor</code>中的<code>allowCoreThreadTimeOut</code>属性设置为<code>true</code>，那么闲置的核心线程在等待新任务的时候，如果时间超过<code>keepAliveTime</code>所设置的时间，核心线程将会被回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> keepAliveTime;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> allowCoreThreadTimeOut;</span><br></pre></td></tr></table></figure></li><li><p><code>maximumPoolSize</code>：设置最大线程池能够容纳的最大线程数，当线程池中的线程达到这个数以后，新任务将会被阻塞。</p></li><li><p><code>keepAliveTime</code>：非核心线程数闲置的时间。</p></li><li><p><code>unit</code>：指定keepAliveTime参数的时间单位。</p></li><li><p><code>workQueue</code>：线程池中的任务队列。</p></li><li><p><code>threadFactory</code>：线程工厂，为线程池提供创建新线程的功能。</p></li><li><p><code>handler</code>：该<code>handler</code>的类型为<code>RejectedExecutionHandler</code>。这个参数不常用，它的作用是当线程池无法执行新任务时，会调用<code>handler</code>的<code>rejectedExecution(Runnable r, ThreadPoolExecutor e)</code>方法来抛出异常。无法执行的原因可能是由于队列满或者任务无法成功执行等。</p></li></ul><p>ThreadPoolExecutor执行任务大致遵循以下规则：</p><ol><li>如果线程池中的线程数量未达到核心线程的数量，会直接启动一个核心线程来执行任务。</li><li>如果线程池中的线程数量已经达到或者超过核心线程的数量，那么任务会被插入到任务队列中排队等待执行。</li><li>如果第2步中无法插入新任务，说明任务队列已满，如果未达到规定的最大线程数量，则启动一个非核心线程来执行任务。</li><li>如果第3步中线程数量超过规定的最大值，则拒绝任务并使用<code>RejectedExecutionHandler</code>的<code>rejectedExecution(Runnable r, ThreadPoolExecutor e)</code>方法来通知调用者。</li></ol><h2 id="线程池的分类"><a href="#线程池的分类" class="headerlink" title="线程池的分类"></a>线程池的分类</h2><p>Android中常见的线程池有四种，<code>FixedThreadPool</code>、<code>CachedThreadPool</code>、<code>ScheduledThreadPool</code>、<code>SingleThreadExecutor</code>。</p><h3 id="FixedThreadPool（Fixed：固定的，不变的）"><a href="#FixedThreadPool（Fixed：固定的，不变的）" class="headerlink" title="FixedThreadPool（Fixed：固定的，不变的）"></a><code>FixedThreadPool</code>（Fixed：固定的，不变的）</h3><p><code>FixedThreadPool</code>线程池是通过<code>Executors</code>的<code>new FixedThreadPool</code>方法来创建。它的特点是该线程池中的线程数量是固定的。即使线程处于闲置的状态，它们也不会被回收，除非线程池被关闭。当所有的线程都处于活跃状态的时候，新任务就处于队列中等待线程来处理。注意，<code>FixedThreadPool</code>只有核心线程，没有非核心线程。总结如下：</p><ul><li>线程数量固定且都是核心线程：核心线程数量和最大线程数量都是nThreads；</li><li>都是核心线程且不会被回收，快速相应外界请求；</li><li>没有超时机制，任务队列也没有大小限制；</li><li>新任务使用核心线程处理，如果没有空闲的核心线程，则排队等待执行。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads, ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                       <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                       <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(),</span><br><span class="line">                                       threadFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CachedThreadPool（Cached：缓存）"><a href="#CachedThreadPool（Cached：缓存）" class="headerlink" title="CachedThreadPool（Cached：缓存）"></a><code>CachedThreadPool</code>（Cached：缓存）</h3><p><code>CachedThreadPool</code>线程池是通过<code>Executors</code>的<code>new CachedThreadPool</code>进行创建的。它是一种线程数目不固定的线程池，它没有核心线程，只有非核心线程，当线程池中的线程都处于活跃状态，就会创建新的线程来处理新的任务。否则就会利用闲置的线程来处理新的任务。线程池中的线程都有超时机制，这个超时机制时长是60s，超过这个时间，闲置的线程就会被回收。这种线程池适合处理大量并且耗时较少的任务。这里得说一下，<code>CachedThreadPool</code>的任务队列，基本都是空的。总结如下:</p><ul><li>线程数量不定，只有非核心线程，最大线程数任意大：传入核心线程数量的参数为0，最大线程数为<code>Integer.MAX_VALUE</code>；</li><li>有新任务时使用空闲线程执行，没有空闲线程则创建新的线程来处理。</li><li>该线程池的每个空闲线程都有超时机制，时常为60s（参数：60L, <code>TimeUnit.SECONDS</code>），空闲超过60s则回收空闲线程。</li><li>适合执行大量的耗时较少的任务，当所有线程闲置超过60s都会被停止，所以这时几乎不占用系统资源。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                       <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                       <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ScheduledThreadPool（Scheduled：预定的、排定的）"><a href="#ScheduledThreadPool（Scheduled：预定的、排定的）" class="headerlink" title="ScheduledThreadPool（Scheduled：预定的、排定的）"></a><code>ScheduledThreadPool</code>（Scheduled：预定的、排定的）</h3><p><code>ScheduledThreadPool</code>线程池是通过<code>Executors</code>的<code>new ScheduledThreadPool</code>进行创建的，它的核心线程是固定的，但是非核心线程数是不固定的，并且当非核心线程一处于空闲状态，就立即被回收。这种线程适合执行定时任务和具有固定周期的重复任务。总结如下：</p><ul><li>核心线程数量固定，非核心线程数量无限制；</li><li>非核心线程闲置超过10s会被回收；</li><li>主要用于执行定时任务和具有固定周期的重复任务；</li><li>四个里面唯一一个有延时执行和周期重复执行的功能：创建时<br><code>ScheduledThreadPoolExecutor(corePoolSize)</code>返回的是<code>new ScheduledThreadPoolExecutor</code>对象，<code>ScheduledThreadPoolExecutor</code>是<code>ThreadPoolExecutor</code>的子类，<code>DelayedWorkQueue</code>是<code>ScheduledThreadPoolExecutor</code>的一个静态内部类，主要用于处理任务队列延迟的工作。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newScheduledThreadPool</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ScheduledThreadPoolExecutor(corePoolSize);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 默认闲置超时回收时常</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> DEFAULT_KEEPALIVE_MILLIS = <span class="number">10L</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ScheduledThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(corePoolSize, Integer.MAX_VALUE, DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS, <span class="keyword">new</span> DelayedWorkQueue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SingleThreadExecutor（单线程线程池）"><a href="#SingleThreadExecutor（单线程线程池）" class="headerlink" title="SingleThreadExecutor（单线程线程池）"></a><code>SingleThreadExecutor</code>（单线程线程池）</h3><p><code>SingleThreadExecutor</code>线程池是通过<code>Executors</code>的<code>new SingleThreadExecutor</code>方法来创建的，这类线程池中只有一个核心线程，也没有非核心线程，这就确保了所有任务能够在同一个线程并且按照顺序来执行，这样就不需要考虑线程同步的问题。总结如下：</p><ul><li>只有一个核心线程，所有任务在同一个线程按顺序执行。</li><li>所有的外界任务统一到一个线程中，所以不需要处理线程同步的问题。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService(<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">   <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line"> <span class="keyword">new</span> LinkedBlockingQueue&lt;Runable&gt;()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Android线程池简单使用"><a href="#Android线程池简单使用" class="headerlink" title="Android线程池简单使用"></a>Android线程池简单使用</h2><h3 id="上面所说的四种常用线程池的实例化："><a href="#上面所说的四种常用线程池的实例化：" class="headerlink" title="上面所说的四种常用线程池的实例化："></a>上面所说的四种常用线程池的实例化：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个Runnable对象</span></span><br><span class="line">Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 四种线程池执行Runnable对象</span></span><br><span class="line">ExecutorService fixedThreadPool = Executors.newFixedThreadPool(<span class="number">1</span>);</span><br><span class="line">fixedThreadPool.execute(runnable);</span><br><span class="line">    </span><br><span class="line">ExecutorService cachedThreadPool = Executors.newCachedThreadPool();</span><br><span class="line">cachedThreadPool.execute(runnable);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意这里创建的是ScheduledExecutorService对象，ScheduledExecutorService是ExecutorService的子类</span></span><br><span class="line">ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(<span class="number">4</span>);</span><br><span class="line"><span class="comment">// 1000ms后执行runnable</span></span><br><span class="line">scheduledThreadPool.schedule(runnable,<span class="number">1000</span>,TimeUnit.MILLISECONDS);</span><br><span class="line"><span class="comment">// 1000ms后，每3000ms执行一次runnable</span></span><br><span class="line">scheduledThreadPool.scheduleAtFixedRate(runnable,<span class="number">1000</span>,<span class="number">2000</span>,TimeUnit.MILLISECONDS);</span><br><span class="line">isRunning = <span class="keyword">true</span>;</span><br><span class="line">    </span><br><span class="line">ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();</span><br><span class="line">singleThreadExecutor.execute(runnable);</span><br></pre></td></tr></table></figure><h3 id="简单使用demo"><a href="#简单使用demo" class="headerlink" title="简单使用demo"></a>简单使用demo</h3><p>添加线程池开始执行和<code>ScheduledThreadPool</code>停止执行的两个按钮点击事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">findViewById(R.id.btn_start).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line">mStatueText.setText(<span class="string">"线程开始执行，次数："</span>+ count);</span><br><span class="line">startThreadPool();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">findViewById(R.id.btn_stop).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">null</span> != scheduledThreadPool &amp;&amp; isRunning)&#123;</span><br><span class="line">scheduledThreadPool.shutdown();</span><br><span class="line">mStatueText.setText(<span class="string">"scheduledThreadPool线程停止，当前次数："</span>+ count);</span><br><span class="line">isRunning = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>startThreadPool();</code>方法里Runnable每执行一次增加一次count并打到TextView上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">count++;</span><br><span class="line">runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">mStatueText.setText(<span class="string">"线程执行完毕，次数："</span>+ count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接着让所有的线程池执行这个Runnable对象，最后的结果是变量count的值从0直接到了3，然后又到5最后无限增长。<br>原因是除ScheduledThreadPool对象外的三个线程池很快执行了任务，ScheduledThreadPool对象的执行了两次任务，两个都延时1000ms。最后循环执行的任务一直在增加count的值。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-中的线程和线程池&quot;&gt;&lt;a href=&quot;#Android-中的线程和线程池&quot; class=&quot;headerlink&quot; title=&quot;Android 中的线程和线程池&quot;&gt;&lt;/a&gt;Android 中的线程和线程池&lt;/h1&gt;&lt;p&gt;我们知道线程是CPU调度的最小单位。在Android中主线程是不能够做耗时操作的，子线程是不能够更新UI的。在Android中，除了Thread外，扮演线程的角色有很多，如AsyncTask,IntentService和HandlerThread等等。良好的线程使用习惯有助于减少 app 出现崩溃和性能开销的风险，接下来介绍一下线程池的使用。&lt;/p&gt;
&lt;h2 id=&quot;线程池的好处&quot;&gt;&lt;a href=&quot;#线程池的好处&quot; class=&quot;headerlink&quot; title=&quot;线程池的好处&quot;&gt;&lt;/a&gt;线程池的好处&lt;/h2&gt;&lt;p&gt;不知道大家有没有遇到过这种情况。我们在写项目，遇到耗时操作的时候，怎么办呢，是不是&lt;code&gt;new Thread().start&lt;/code&gt;，那这样的话，整个项目中得&lt;code&gt;new&lt;/code&gt;多少个&lt;code&gt;Thread&lt;/code&gt;。这种明显是很浪费性能。那么有没有一种可以方法对线程进行复用呢？答案就是线程池。&lt;/p&gt;
&lt;p&gt;先说一下线程池的好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重用线程池中的线程，避免因为线程的创建和销毁带来的性能开销。&lt;/li&gt;
&lt;li&gt;能有效的控制线程池中的线程并发数，避免大量线程之间因为互相抢占资源而导致的阻塞现象。&lt;/li&gt;
&lt;li&gt;能够对线程进行简单的管理，并提供定时执行以及指定间隔循环执行等功能。
    
    </summary>
    
    
      <category term="Android" scheme="https://william-hl1991.github.io/categories/Android/"/>
    
    
      <category term="android" scheme="https://william-hl1991.github.io/tags/android/"/>
    
      <category term="移动端开发" scheme="https://william-hl1991.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>如何通过端口查询启动文件</title>
    <link href="https://william-hl1991.github.io/2019/11/14/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E7%AB%AF%E5%8F%A3%E6%9F%A5%E8%AF%A2%E5%90%AF%E5%8A%A8%E6%96%87%E4%BB%B6/"/>
    <id>https://william-hl1991.github.io/2019/11/14/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E7%AB%AF%E5%8F%A3%E6%9F%A5%E8%AF%A2%E5%90%AF%E5%8A%A8%E6%96%87%E4%BB%B6/</id>
    <published>2019-11-14T10:05:36.000Z</published>
    <updated>2020-04-22T12:02:40.200Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="通过端口查询PID"><a href="#通过端口查询PID" class="headerlink" title="通过端口查询PID"></a>通过端口查询PID</h3><p>通过lsof + 端口查询pid</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:8644</span><br><span class="line">COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">python  14306 work    3u  IPv4 332406      0t0  TCP *:8644 (LISTEN)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="通过进程查到详细的执行程序"><a href="#通过进程查到详细的执行程序" class="headerlink" title="通过进程查到详细的执行程序"></a>通过进程查到详细的执行程序</h3><p><code>cd /proc/14306</code></p><h3 id="查看进城详细信息"><a href="#查看进城详细信息" class="headerlink" title="查看进城详细信息"></a>查看进城详细信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">ls -ail</span><br><span class="line">total 0</span><br><span class="line">    332415 dr-xr-xr-x   8 work work 0 Apr  2 10:15 .</span><br><span class="line">         1 dr-xr-xr-x 256 root root 0 Apr  2 09:33 ..</span><br><span class="line">3856778617 dr-xr-xr-x   2 work work 0 Jun 24 21:34 attr</span><br><span class="line">3856778602 -r--------   1 work work 0 Jun 24 21:34 auxv</span><br><span class="line">3856778620 -r--r--r--   1 work work 0 Jun 24 21:34 cgroup</span><br><span class="line">3856778614 --w-------   1 work work 0 Jun 24 21:34 clear_refs</span><br><span class="line">3844484462 -r--r--r--   1 work work 0 Jun 24 19:21 cmdline</span><br><span class="line">3856778626 -rw-r--r--   1 work work 0 Jun 24 21:34 coredump_filter</span><br><span class="line">3856778619 -r--r--r--   1 work work 0 Jun 24 21:34 cpuset</span><br><span class="line">3856778609 lrwxrwxrwx   1 work work 0 Jun 24 21:34 cwd -&gt; /home/work/ci/android_output</span><br><span class="line">3851092527 -r--------   1 work work 0 Jun 24 20:33 environ</span><br><span class="line">3844538795 lrwxrwxrwx   1 work work 0 Jun 24 19:21 exe -&gt; /home/work/.jumbo/bin/python2.7</span><br><span class="line">3855433644 dr-x------   2 work work 0 Jun 24 21:19 fd</span><br><span class="line">3185228463 dr-x------   2 work work 0 Jun 19 22:12 fdinfo</span><br><span class="line">3856778627 -r--------   1 work work 0 Jun 24 21:34 io</span><br><span class="line">3856778604 -rw-------   1 work work 0 Jun 24 21:34 limits</span><br><span class="line">3856778624 -rw-r--r--   1 work work 0 Jun 24 21:34 loginuid</span><br><span class="line">3844911972 -r--r--r--   1 work work 0 Jun 24 19:26 maps</span><br><span class="line">3856778608 -rw-------   1 work work 0 Jun 24 21:34 mem</span><br><span class="line">3856778612 -r--r--r--   1 work work 0 Jun 24 21:34 mountinfo</span><br><span class="line">3856778611 -r--r--r--   1 work work 0 Jun 24 21:34 mounts</span><br><span class="line">3856778613 -r--------   1 work work 0 Jun 24 21:34 mountstats</span><br><span class="line">3856778601 dr-xr-xr-x   4 work work 0 Jun 24 21:34 net</span><br><span class="line">3149602133 dr-x--x--x   2 work work 0 Jun 19 15:47 ns</span><br><span class="line">3856778607 -r--r--r--   1 work work 0 Jun 24 21:34 numa_maps</span><br><span class="line">3856778622 -rw-r--r--   1 work work 0 Jun 24 21:34 oom_adj</span><br><span class="line">3856778621 -r--r--r--   1 work work 0 Jun 24 21:34 oom_score</span><br><span class="line">3856778623 -rw-r--r--   1 work work 0 Jun 24 21:34 oom_score_adj</span><br><span class="line">3856778616 -r--r--r--   1 work work 0 Jun 24 21:34 pagemap</span><br><span class="line">3856778603 -r--r--r--   1 work work 0 Jun 24 21:34 personality</span><br><span class="line">3856778610 lrwxrwxrwx   1 work work 0 Jun 24 21:34 root -&gt; /</span><br><span class="line">3856778605 -rw-r--r--   1 work work 0 Jun 24 21:34 sched</span><br><span class="line">3856778625 -r--r--r--   1 work work 0 Jun 24 21:34 sessionid</span><br><span class="line">3856778615 -r--r--r--   1 work work 0 Jun 24 21:34 smaps</span><br><span class="line">3844441433 -r--r--r--   1 work work 0 Jun 24 19:20 stat</span><br><span class="line">3851714075 -r--r--r--   1 work work 0 Jun 24 20:39 statm</span><br><span class="line">3844444746 -r--r--r--   1 work work 0 Jun 24 19:20 status</span><br><span class="line">3856778606 -r--r--r--   1 work work 0 Jun 24 21:34 syscall</span><br><span class="line">3149602131 dr-xr-xr-x   3 work work 0 Jun 19 15:47 task</span><br><span class="line">3856778618 -r--r--r--   1 work work 0 Jun 24 21:34 wchan</span><br></pre></td></tr></table></figure><p>通过信息得出：<code>/home/work/.jumbo/bin/python2.7</code> python执行该文件</p><ul><li>cwd符号链接的是进程运行目录；</li><li>exe符号连接就是执行程序的绝对路径；</li><li>cmdline就是程序运行时输入的命令行命令；</li><li>environ记录了进程运行时的环境变量；</li><li>fd目录下是进程打开或使用的文件的符号连接。</li></ul><h3 id="或者通过pid直接得出"><a href="#或者通过pid直接得出" class="headerlink" title="或者通过pid直接得出"></a>或者通过pid直接得出</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">lsof -p 14306</span><br><span class="line">COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF     NODE NAME</span><br><span class="line">python  14306 work  cwd    DIR 253,16    20480 54534924 /home/work/ci/android_output</span><br><span class="line">python  14306 work  rtd    DIR  253,1     4096        2 /</span><br><span class="line">python  14306 work  txt    REG 253,16     9872 61870725 /home/work/.jumbo/bin/python2.7</span><br><span class="line">python  14306 work  mem    REG  253,1   156872     2249 /lib64/ld-2.12.so</span><br><span class="line">python  14306 work  mem    REG  253,1    22536     2191 /lib64/libdl-2.12.so</span><br><span class="line">python  14306 work  mem    REG  253,1  1918016     2164 /lib64/libc-2.12.so</span><br><span class="line">python  14306 work  mem    REG  253,1   145720     2291 /lib64/libpthread-2.12.so</span><br><span class="line">python  14306 work  mem    REG  253,1   598800     2257 /lib64/libm-2.12.so</span><br><span class="line">python  14306 work  mem    REG  253,1   113952     2132 /lib64/libresolv-2.12.so</span><br><span class="line">python  14306 work  mem    REG  253,1    17520     2248 /lib64/libutil-2.12.so</span><br><span class="line">python  14306 work  mem    REG  253,1    27424     2238 /lib64/libnss_dns-2.12.so</span><br><span class="line">python  14306 work  mem    REG  253,1    54080    56909 /lib64/libnss_bns.so.2</span><br><span class="line">python  14306 work  mem    REG  253,1    65928     2113 /lib64/libnss_files-2.12.so</span><br><span class="line">python  14306 work  mem    REG 253,16    25906 65557512 /home/work/.jumbo/lib/python2.7/lib-dynload/grp.so</span><br><span class="line">python  14306 work  mem    REG 253,16    45496 65557500 /home/work/.jumbo/lib/python2.7/lib-dynload/_heapq.so</span><br><span class="line">python  14306 work  mem    REG 253,16    27098 65557509 /home/work/.jumbo/lib/python2.7/lib-dynload/_bisect.so</span><br><span class="line">python  14306 work  mem    REG 253,16   142191 65557496 /home/work/.jumbo/lib/python2.7/lib-dynload/itertools.so</span><br><span class="line">python  14306 work  mem    REG 253,16    80848 65557511 /home/work/.jumbo/lib/python2.7/lib-dynload/operator.so</span><br><span class="line">python  14306 work  mem    REG 253,16    77851 65557502 /home/work/.jumbo/lib/python2.7/lib-dynload/_collections.so</span><br><span class="line">python  14306 work  mem    REG 253,16    91443 65557473 /home/work/.jumbo/lib/python2.7/lib-dynload/_struct.so</span><br><span class="line">python  14306 work  mem    REG 253,16    65260 65557451 /home/work/.jumbo/lib/python2.7/lib-dynload/strop.so</span><br><span class="line">python  14306 work  mem    REG 253,16    60186 65557492 /home/work/.jumbo/lib/python2.7/lib-dynload/select.so</span><br><span class="line">python  14306 work  mem    REG 253,16    33467 65557508 /home/work/.jumbo/lib/python2.7/lib-dynload/fcntl.so</span><br><span class="line">python  14306 work  mem    REG 253,16    35646 65557462 /home/work/.jumbo/lib/python2.7/lib-dynload/_random.so</span><br><span class="line">python  14306 work  mem    REG 253,16    43023 65557486 /home/work/.jumbo/lib/python2.7/lib-dynload/_hashlib.so</span><br><span class="line">python  14306 work  mem    REG 253,16    56865 65557501 /home/work/.jumbo/lib/python2.7/lib-dynload/binascii.so</span><br><span class="line">python  14306 work  mem    REG 253,16    81710 65557465 /home/work/.jumbo/lib/python2.7/lib-dynload/math.so</span><br><span class="line">python  14306 work  mem    REG 253,16    45016 65557461 /home/work/.jumbo/lib/python2.7/lib-dynload/cStringIO.so</span><br><span class="line">python  14306 work  mem    REG 253,16    98201 61872928 /home/work/.jumbo/lib/libz.so.1.2.11</span><br><span class="line">python  14306 work  mem    REG 253,16  2610624 61876789 /home/work/.jumbo/lib/libcrypto.so.1.0.0</span><br><span class="line">python  14306 work  mem    REG 253,16   512648 61876786 /home/work/.jumbo/lib/libssl.so.1.0.0</span><br><span class="line">python  14306 work  mem    REG 253,16   114566 65557464 /home/work/.jumbo/lib/python2.7/lib-dynload/_ssl.so</span><br><span class="line">python  14306 work  mem    REG 253,16    31653 65557453 /home/work/.jumbo/lib/python2.7/lib-dynload/_functools.so</span><br><span class="line">python  14306 work  mem    REG 253,16   131056 65557467 /home/work/.jumbo/lib/python2.7/lib-dynload/_socket.so</span><br><span class="line">python  14306 work  mem    REG 253,16    47069 65557456 /home/work/.jumbo/lib/python2.7/lib-dynload/time.so</span><br><span class="line">python  14306 work  mem    REG  253,1 99158576    46392 /usr/lib/locale/locale-archive</span><br><span class="line">python  14306 work  mem    REG 253,16  5267160 61870735 /home/work/.jumbo/lib/libpython2.7.so.1.0</span><br><span class="line">python  14306 work    0w   CHR    1,3      0t0       21 /dev/null</span><br><span class="line">python  14306 work    1w   REG 253,16    20506 54534849 /home/work/ci/android_output/nohup.out</span><br><span class="line">python  14306 work    2w   REG 253,16    20506 54534849 /home/work/ci/android_output/nohup.out</span><br><span class="line">python  14306 work    3u  IPv4 332406      0t0      TCP *:8644 (LISTEN)</span><br></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="使用netstat来查看端口的pid"><a href="#使用netstat来查看端口的pid" class="headerlink" title="使用netstat来查看端口的pid"></a>使用netstat来查看端口的pid</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -antlp|grep 8087</span><br></pre></td></tr></table></figure><p>通过结果查看pid</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">(Not all processes could be identified, non-owned process info</span><br><span class="line"> will not be shown, you would have to be root to see it all.)</span><br><span class="line">tcp        0      0 0.0.0.0:8087                0.0.0.0:*                   LISTEN      14023/nginx.conf</span><br><span class="line">tcp        0      0 127.0.0.1:13417             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13921             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:12845             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:12702             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13925             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13489             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13556             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:12842             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13702             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13631             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13054             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13642             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13705             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:12848             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13348             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:14055             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13600             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13340             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13198             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13486             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13560             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:12770             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:12915             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13131             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13057             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:14049             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:12983             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13779             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:12696             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:12986             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13637             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13490             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13200             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13559             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:12624             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13199             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13195             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13708             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13268             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13423             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:14039             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13630             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13493             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13855             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13785             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13277             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13847             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13922             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:12688             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:12991             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13274             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13059             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13777             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13421             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13713             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13266             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:12626             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:12768             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13854             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13203             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13061             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13275             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:12919             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:12739             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:12911             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13775             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13056             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:12628             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:12703             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13415             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13132             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13350             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:12990             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13707             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13129             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13945             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:12913             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13420             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13634             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13562             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13342             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13126             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13124             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13924             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:12985             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:12840             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13565             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:12693             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13845             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:12771             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:14046             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:12914             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13343             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:14048             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13861             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:12773             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:12627             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13488             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:12777             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:13773             127.0.0.1:8087              TIME_WAIT   -</span><br><span class="line">tcp        0      0 127.0.0.1:12846             127.0.0.1:8087              TIME_WAIT   -</span><br></pre></td></tr></table></figure><p>之后的方法同上</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h2&gt;&lt;h3 id=&quot;通过端口查询PID&quot;&gt;&lt;a href=&quot;#通过端口查询PID&quot; class=&quot;headerlink&quot; title=&quot;通过端口查询PID&quot;&gt;&lt;/a&gt;通过端口查询PID&lt;/h3&gt;&lt;p&gt;通过lsof + 端口查询pid&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;lsof -i:8644&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;python  14306 work    3u  IPv4 332406      0t0  TCP *:8644 (LISTEN)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="shell" scheme="https://william-hl1991.github.io/categories/shell/"/>
    
    
      <category term="端口" scheme="https://william-hl1991.github.io/tags/%E7%AB%AF%E5%8F%A3/"/>
    
      <category term="技巧" scheme="https://william-hl1991.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>sonarqube安装</title>
    <link href="https://william-hl1991.github.io/2019/10/26/sonarqube%E5%AE%89%E8%A3%85/"/>
    <id>https://william-hl1991.github.io/2019/10/26/sonarqube%E5%AE%89%E8%A3%85/</id>
    <published>2019-10-26T10:09:18.000Z</published>
    <updated>2020-04-22T12:04:54.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>如果需要使用mysql作为数据库，sonarqueb版本的不能高于7.9及以上。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="1-JAVA与Mysql"><a href="#1-JAVA与Mysql" class="headerlink" title="1 JAVA与Mysql"></a>1 JAVA与Mysql</h3><p>使用sonarqube6.7.5版本，故安装jdk1.8即可</p><h3 id="2-sonarqube安装"><a href="#2-sonarqube安装" class="headerlink" title="2 sonarqube安装"></a>2 sonarqube安装</h3><p>下载直接放到<code>/usr/local/</code>下</p><h2 id="环境变量和数据库配置"><a href="#环境变量和数据库配置" class="headerlink" title="环境变量和数据库配置"></a>环境变量和数据库配置</h2><p>在.bash_profile文件中增加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export OCLINT_HOME=/usr/local/oclint-0.13</span><br><span class="line">export PATH=$OCLINT_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><p>数据库设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE sonar CHARACTER SET utf8 COLLATE utf8_general_ci; </span><br><span class="line">CREATE USER 'sonar' IDENTIFIED BY 'sonar';</span><br><span class="line">GRANT ALL ON sonar.* TO 'sonar'@'%' IDENTIFIED BY 'sonar';</span><br><span class="line">GRANT ALL ON sonar.* TO 'sonar'@'localhost' IDENTIFIED BY 'sonar';</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="配置sonarqube"><a href="#配置sonarqube" class="headerlink" title="配置sonarqube"></a>配置sonarqube</h2><p>配置sonar.properties<br>打开路径<code>/usr/local/sonarqube-6.7.5/conf/sonar.properties</code><br>修改参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sonar.jdbc.username=你的数据库账号（我的是root）</span><br><span class="line">sonar.jdbc.password=你的数据库密码 （123）</span><br><span class="line"></span><br><span class="line">sonar.jdbc.url=jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance&amp;useSSL=false</span><br><span class="line"></span><br><span class="line">sonar.jdbc.maxActive=60</span><br><span class="line">sonar.jdbc.maxIdle=5</span><br><span class="line">sonar.jdbc.minIdle=2</span><br><span class="line">sonar.jdbc.maxWait=5000</span><br><span class="line"></span><br><span class="line">sonar.jdbc.minEvictableIdleTimeMillis=600000</span><br><span class="line">sonar.jdbc.timeBetweenEvictionRunsMillis=30000</span><br></pre></td></tr></table></figure><p>完成后在目录<code>/usr/local/sonarqube-6.7.5/bin/macosx-universal-64/</code>中<code>sonar.sh start</code><br>完成启动后，打开浏览器访问<a href="http://localhost:9000" target="_blank" rel="noopener">http://localhost:9000</a><br>如果访问成功即完成安装，如果不成功查看log修正，log位置<code>/usr/local/sonarqube-6.7.5/logs</code></p><h2 id="如何扫描iOS代码库"><a href="#如何扫描iOS代码库" class="headerlink" title="如何扫描iOS代码库"></a>如何扫描iOS代码库</h2><p>在代码库的根目录增加<code>sonar-project.properties</code>和<code>run-sonar.sh</code>两个文件。内容示例如下：<br><code>sonar-project.properties</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sonar.projectKey=wanpaniOS <span class="comment">//sonar中显示的显示</span></span><br><span class="line">sonar.projectName=netdiskiOS <span class="comment">//同上即可</span></span><br><span class="line">sonar.projectVersion=<span class="number">10.0</span><span class="number">.73</span>  <span class="comment">//sonar中显示的版本号</span></span><br><span class="line">sonar.sources=<span class="regexp">/Users/</span>william/netdisk/ios  <span class="comment">//项目的代码目录</span></span><br><span class="line">sonar.objectivec.project=<span class="regexp">/Users/</span>william/netdisk/ios/netdisk/netdisk_iphone/netdisk_iPhone.xcodeproj   <span class="comment">//xcodeproj的位置和名称</span></span><br><span class="line">sonar.objectivec.workspace=netdisk_iPhone.xcworkspace   <span class="comment">//xcworkspace的位置和名称</span></span><br><span class="line">sonar.objectivec.appScheme=netdisk_iPhone  <span class="comment">// scheme的名称</span></span><br></pre></td></tr></table></figure><p><code>run-sonar.sh</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># INSTALLATION: script to copy in your Xcode project in the same directory as the .xcodeproj file</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># USAGE: ./run-sonar.sh</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># DE<span class="doctag">BUG:</span> ./run-sonar.sh -v</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># WARNING: edit your project parameters in sonar-project.properties rather than modifying this script</span></span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"></span><br><span class="line">trap "echo 'Script interrupted by Ctrl+C'; stopProgress; exit 1" SIGHUP SIGINT SIGTERM</span><br><span class="line"></span><br><span class="line">function testIsInstalled() &#123;</span><br><span class="line"></span><br><span class="line">    hash $1 2&gt;/dev/null</span><br><span class="line">    if [ $? -eq 1 ]; then</span><br><span class="line">        echo &gt;&amp;2 "ERROR - $1 is not installed or not in your PATH"; exit 1;</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function readParameter() &#123;</span><br><span class="line">    </span><br><span class="line">    variable=$1</span><br><span class="line">    shift</span><br><span class="line">    parameter=$1</span><br><span class="line">    shift</span><br><span class="line"></span><br><span class="line">    eval $variable="\"$(sed '/^\#/d' sonar-project.properties | grep $parameter | tail -n 1 | cut -d '=' -f2- | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')\""</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Run a <span class="built_in">set</span> of commands with logging and error handling</span></span><br><span class="line">function runCommand() &#123;</span><br><span class="line"></span><br><span class="line">    # 1st arg: redirect stdout </span><br><span class="line">    # 2nd arg: command to run</span><br><span class="line">    # 3rd..nth arg: args</span><br><span class="line">    redirect=$1</span><br><span class="line">    shift</span><br><span class="line"></span><br><span class="line">    command=$1</span><br><span class="line">    shift</span><br><span class="line">    </span><br><span class="line">    if [ "$nflag" = "on" ]; then</span><br><span class="line">        # don't execute command, just echo it</span><br><span class="line">        echo</span><br><span class="line">        if [ "$redirect" = "/dev/stdout" ]; then    </span><br><span class="line">            if [ "$vflag" = "on" ]; then</span><br><span class="line">                echo "+" $command "$@"</span><br><span class="line">            else</span><br><span class="line">                echo "+" $command "$@" "&gt; /dev/null"</span><br><span class="line">            fi</span><br><span class="line">        elif [ "$redirect" != "no" ]; then</span><br><span class="line">            echo "+" $command "$@" "&gt; $redirect"</span><br><span class="line">        else</span><br><span class="line">            echo "+" $command "$@"</span><br><span class="line">        fi</span><br><span class="line">        </span><br><span class="line">    elif [ "$vflag" = "on" ]; then</span><br><span class="line">        echo</span><br><span class="line"></span><br><span class="line">        if [ "$redirect" = "/dev/stdout" ]; then    </span><br><span class="line">            set -x #echo on</span><br><span class="line">            $command "$@"</span><br><span class="line">            returnValue=$?  </span><br><span class="line">            set +x #echo off            </span><br><span class="line">        elif [ "$redirect" != "no" ]; then</span><br><span class="line">            set -x #echo on</span><br><span class="line">            $command "$@" &gt; $redirect</span><br><span class="line">            returnValue=$?  </span><br><span class="line">            set +x #echo off            </span><br><span class="line">        else</span><br><span class="line">            set -x #echo on</span><br><span class="line">            $command "$@"</span><br><span class="line">            returnValue=$?  </span><br><span class="line">            set +x #echo off            </span><br><span class="line">        fi</span><br><span class="line">        </span><br><span class="line">        if [[ $returnValue != 0 &amp;&amp; $returnValue != 5 ]] ; then</span><br><span class="line">            stopProgress</span><br><span class="line">            echo "ERROR - Command '$command $@' failed with error code: $returnValue"</span><br><span class="line">            exit $returnValue</span><br><span class="line">        fi</span><br><span class="line">    else</span><br><span class="line">        echo "--------------------------------"</span><br><span class="line">        echo $command</span><br><span class="line">        echo "$@"</span><br><span class="line">        if [ "$redirect" = "/dev/stdout" ]; then    </span><br><span class="line">            $command "$@" &gt; /dev/null</span><br><span class="line">        elif [ "$redirect" != "no" ]; then</span><br><span class="line">            $command "$@" &gt; $redirect</span><br><span class="line">        else</span><br><span class="line">            $command "$@"</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">        returnValue=$?</span><br><span class="line">        if [[ $returnValue != 0 &amp;&amp; $returnValue != 5 ]] ; then</span><br><span class="line">            stopProgress</span><br><span class="line">            echo "ERROR - Command '$command $@' failed with error code: $returnValue"</span><br><span class="line">            exit $?</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">        echo    </span><br><span class="line">    fi  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># COMMAND LINE OPTIONS</span></span></span><br><span class="line">vflag=""</span><br><span class="line">nflag=""</span><br><span class="line">oclint="on"</span><br><span class="line">while [ $# -gt 0 ]</span><br><span class="line">do</span><br><span class="line">    case "$1" in</span><br><span class="line">    -v) vflag=on;;</span><br><span class="line">    -n) nflag=on;;</span><br><span class="line">    -nooclint) oclint="";;      </span><br><span class="line">    --) shift; break;;</span><br><span class="line">    -*)</span><br><span class="line">        echo &gt;&amp;2 "Usage: $0 [-v]"</span><br><span class="line">        exit 1;;</span><br><span class="line">    *)  break;;     # terminate while loop</span><br><span class="line">    esac</span><br><span class="line">    shift</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Usage OK</span></span><br><span class="line">echo "Running run-sonar.sh..."</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查依赖是否已经安装 xcpretty and oclint</span></span><br><span class="line">echo "check xcodebuild, oclint installed is installed"</span><br><span class="line">testIsInstalled xcodebuild</span><br><span class="line">testIsInstalled xcpretty</span><br><span class="line">testIsInstalled oclint</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查有没有 sonar-project.properties 文件</span></span><br><span class="line">if [ ! -f sonar-project.properties ]; then</span><br><span class="line">    echo &gt;&amp;2 "ERROR - No sonar-project.properties in current directory"; exit 1;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从 sonar-project.properties 读出参数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> .xcworkspacefilename</span></span><br><span class="line">workspaceFile=''; readParameter workspaceFile 'sonar.objectivec.workspace'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 源文件</span></span><br><span class="line">srcDirs=''; readParameter srcDirs 'sonar.sources'</span><br><span class="line"><span class="meta">#</span><span class="bash"> Scheme</span></span><br><span class="line">appScheme=''; readParameter appScheme 'sonar.objectivec.appScheme'</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [ "$vflag" = "on" ]; then</span><br><span class="line">    echo "Xcode workspace file is: $workspaceFile"</span><br><span class="line">    echo "Xcode application scheme is: $appScheme"</span><br><span class="line">    echo "Xcode sources is: $srcDirs"</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查必须参数</span></span><br><span class="line">if [ ! "$workspaceFile" != " " ]; then</span><br><span class="line">    echo &gt;&amp;2 "ERROR - sonar.objectivec.project parameter is missing in sonar-project.properties. You must specify which projects (comma-separated list) are application code within the workspace $workspaceFile."</span><br><span class="line">    exit 1   </span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -z "$srcDirs" -o "$srcDirs" = " " ]; then</span><br><span class="line">    echo &gt;&amp;2 "ERROR - sonar.sources parameter is missing in sonar-project.properties. You must specify which directories contain your .h/.m source files (comma-separated list)."</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -z "$appScheme" -o "$appScheme" = " " ]; then</span><br><span class="line">    echo &gt;&amp;2 "ERROR - sonar.objectivec.appScheme parameter is missing in sonar-project.properties. You must specify which scheme is used to build your application."</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># SCRIPT</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Create sonar-reports/ <span class="keyword">for</span> reports output</span></span><br><span class="line"></span><br><span class="line">if [[ ! (-d "sonar-reports") &amp;&amp; ("$nflag" != "on") ]]; then</span><br><span class="line">    if [ "$vflag" = "on" ]; then</span><br><span class="line">        echo 'Creating directory sonar-reports/'</span><br><span class="line">    fi</span><br><span class="line">    mkdir sonar-reports</span><br><span class="line">    if [[ $? != 0 ]] ; then</span><br><span class="line">        stopProgress</span><br><span class="line">        exit $?</span><br><span class="line">    fi</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export LC_ALL="en_US.UTF-8"</span><br><span class="line">if [[ "$workspaceFile" != "" ]] ; then</span><br><span class="line">    echo "xcodebuild clean"</span><br><span class="line">    xcodebuild clean -workspace "$&#123;workspaceFile&#125;" -scheme "$&#123;appScheme&#125;"</span><br><span class="line">    echo "xcodebuild analyze"</span><br><span class="line">    xcodebuild -workspace "$&#123;workspaceFile&#125;" -scheme "$&#123;appScheme&#125;" -configuration Debug analyze COMPILER_INDEX_STORE_ENABLE=NO  | tee xcodebuild.log | xcpretty -r json-compilation-database</span><br><span class="line">else</span><br><span class="line">    echo "no workspaceFile"</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo "mv compilation_db.json compile_commands.json"</span><br><span class="line">mv ./build/reports/compilation_db.json ./compile_commands.json</span><br><span class="line"></span><br><span class="line">echo "check folder existence"</span><br><span class="line">if [ ! -d "build/sonar-reports" ]; then</span><br><span class="line">    mkdir -p build/sonar-reports</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo "oclint-json-compilation-database"</span><br><span class="line">oclint-json-compilation-database \</span><br><span class="line">-v \</span><br><span class="line">-- \</span><br><span class="line">-report-type pmd -o build/sonar-reports/oclint.xml \</span><br><span class="line">-max-priority-1=99999 -max-priority-2=99999 -max-priority-3=99999 \</span><br><span class="line">-rc LONG_METHOD=300 \</span><br><span class="line">-rc LONG_VARIABLE_NAME=50 \</span><br><span class="line">-rc LONG_CLASS=3000 \</span><br><span class="line">-rc NCSS_METHOD=300 \</span><br><span class="line">-rc NESTED_BLOCK_DEPTH=8 \</span><br><span class="line"></span><br><span class="line">echo "upload generated oclint report to sonar qube server"</span><br><span class="line">sonar-scanner -X</span><br><span class="line"></span><br><span class="line">echo "clean up"</span><br><span class="line">rm -rf .scannerwork</span><br><span class="line">rm -rf xcodebuild.log</span><br><span class="line">rm -rf compile_commands.json</span><br><span class="line">rm -rf build/sonar-reports/oclint.xml</span><br><span class="line"></span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><p>然后在项目的根目录中，直接运行<code>run-sonar.sh</code></p><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Error during SonarQube Scanner execution</span><br><span class="line">ERROR: Failed to upload report - 500: An error has occurred. Please contact your administrator</span><br></pre></td></tr></table></figure><p>查看web.log</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: com.mysql.jdbc.PacketTooBigException: Packet for query is too large (54581962 &gt; 20971520). You can change this value on the server by setting the max_allowed_packet' variable.</span><br></pre></td></tr></table></figure><p>原因是mysql收到包超过了限制。<br>如下处理<br>修改<code>/usr/local/etc/my.cnf</code>中：增加max_allowed_packet = 1024M</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">max_allowed_packet = 1024M</span><br></pre></td></tr></table></figure><p>以及<code>/usr/local/mysql-5.7.17-macos10.12-x86_64/support-files/my-default.cnf</code>做上述相同修改。<br>重新启动mysql和sonarqube。<br>方法2：<br>进入数据库<br><code>mysql -u root -p</code><br>查看<code>show VARIABLES like &#39;%max_allowed_packet%&#39;;</code><br><img src="https://agroup-bos.cdn.bcebos.com/7725297d866a8659e52fc4c9c8551be433d92313" alt="图片"><br>修改<code>max_allowed_packet</code>:<br><code>set global max_allowed_packet = 2048 * 1024 * 1024;</code><br>然后退出mysql，再进入。<br>重启sonarqube。<br>此种方案不能重启电脑，重启上述修改会失效。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;版本&quot;&gt;&lt;a href=&quot;#版本&quot; class=&quot;headerlink&quot; title=&quot;版本&quot;&gt;&lt;/a&gt;版本&lt;/h2&gt;&lt;p&gt;如果需要使用mysql作为数据库，sonarqueb版本的不能高于7.9及以上。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;h3 id=&quot;1-JAVA与Mysql&quot;&gt;&lt;a href=&quot;#1-JAVA与Mysql&quot; class=&quot;headerlink&quot; title=&quot;1 JAVA与Mysql&quot;&gt;&lt;/a&gt;1 JAVA与Mysql&lt;/h3&gt;&lt;p&gt;使用sonarqube6.7.5版本，故安装jdk1.8即可&lt;/p&gt;
&lt;h3 id=&quot;2-sonarqube安装&quot;&gt;&lt;a href=&quot;#2-sonarqube安装&quot; class=&quot;headerlink&quot; title=&quot;2 sonarqube安装&quot;&gt;&lt;/a&gt;2 sonarqube安装&lt;/h3&gt;&lt;p&gt;下载直接放到&lt;code&gt;/usr/local/&lt;/code&gt;下&lt;/p&gt;
&lt;h2 id=&quot;环境变量和数据库配置&quot;&gt;&lt;a href=&quot;#环境变量和数据库配置&quot; class=&quot;headerlink&quot; title=&quot;环境变量和数据库配置&quot;&gt;&lt;/a&gt;环境变量和数据库配置&lt;/h2&gt;&lt;p&gt;在.bash_profile文件中增加&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;export OCLINT_HOME=/usr/local/oclint-0.13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export PATH=$OCLINT_HOME/bin:$PATH&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;数据库设置：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CREATE DATABASE sonar CHARACTER SET utf8 COLLATE utf8_general_ci; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CREATE USER &#39;sonar&#39; IDENTIFIED BY &#39;sonar&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GRANT ALL ON sonar.* TO &#39;sonar&#39;@&#39;%&#39; IDENTIFIED BY &#39;sonar&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GRANT ALL ON sonar.* TO &#39;sonar&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;sonar&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FLUSH PRIVILEGES;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="测试" scheme="https://william-hl1991.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试" scheme="https://william-hl1991.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="代码质量" scheme="https://william-hl1991.github.io/tags/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>AM命令</title>
    <link href="https://william-hl1991.github.io/2019/07/10/AM%E5%91%BD%E4%BB%A4/"/>
    <id>https://william-hl1991.github.io/2019/07/10/AM%E5%91%BD%E4%BB%A4/</id>
    <published>2019-07-10T09:17:48.000Z</published>
    <updated>2020-04-22T12:02:40.231Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h1><p>am指令是 activity manager的缩写，可以启动Service、Broadcast，杀进程，监控等功能，这些功能都非常便捷调试程序。</p><p>可以通过adb shell 进入Android 的Linux命令界面，输入am -help查看详细命令，先介绍几个简单用法.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//使用Action方式打开系统设置-输入法设置</span><br><span class="line">am start -a android.settings.INPUT_METHOD_SETTINGS</span><br><span class="line"></span><br><span class="line">//使用Action方式打开网站https://amberweather.com</span><br><span class="line">am start -a android.intent.action.VIEW -d  https://amberweather.com</span><br><span class="line"></span><br><span class="line">//打开拨号界面，并传递一个DATA_URI数据给拨号界面</span><br><span class="line">am start -a android.intent.action.CALL -d tel:10086</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><p>通过<code>am -h</code>可以查看am完整的用法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br></pre></td><td class="code"><pre><span class="line">sirius:/ $ am -h</span><br><span class="line">Activity manager (activity) commands:</span><br><span class="line">  help</span><br><span class="line">      Print this help text.</span><br><span class="line">  start-activity [-D] [-N] [-W] [-P &lt;FILE&gt;] [--start-profiler &lt;FILE&gt;]</span><br><span class="line">          [--sampling INTERVAL] [--streaming] [-R COUNT] [-S]</span><br><span class="line">          [--track-allocation] [--user &lt;USER_ID&gt; | current] &lt;INTENT&gt;</span><br><span class="line">      Start an Activity.  Options are:</span><br><span class="line">      -D: enable debugging</span><br><span class="line">      -N: enable native debugging</span><br><span class="line">      -W: wait for launch to complete</span><br><span class="line">      --start-profiler &lt;FILE&gt;: start profiler and send results to &lt;FILE&gt;</span><br><span class="line">      --sampling INTERVAL: use sample profiling with INTERVAL microseconds</span><br><span class="line">          between samples (use with --start-profiler)</span><br><span class="line">      --streaming: stream the profiling output to the specified file</span><br><span class="line">          (use with --start-profiler)</span><br><span class="line">      -P &lt;FILE&gt;: like above, but profiling stops when app goes idle</span><br><span class="line">      --attach-agent &lt;agent&gt;: attach the given agent before binding</span><br><span class="line">      --attach-agent-bind &lt;agent&gt;: attach the given agent during binding</span><br><span class="line">      -R: repeat the activity launch &lt;COUNT&gt; times.  Prior to each repeat,</span><br><span class="line">          the top activity will be finished.</span><br><span class="line">      -S: force stop the target app before starting the activity</span><br><span class="line">      --track-allocation: enable tracking of object allocations</span><br><span class="line">      --user &lt;USER_ID&gt; | current: Specify which user to run as; if not</span><br><span class="line">          specified then run as the current user.</span><br><span class="line">      --windowingMode &lt;WINDOWING_MODE&gt;: The windowing mode to launch the activity into.</span><br><span class="line">      --activityType &lt;ACTIVITY_TYPE&gt;: The activity type to launch the activity as.</span><br><span class="line">  start-service [--user &lt;USER_ID&gt; | current] &lt;INTENT&gt;</span><br><span class="line">      Start a Service.  Options are:</span><br><span class="line">      --user &lt;USER_ID&gt; | current: Specify which user to run as; if not</span><br><span class="line">          specified then run as the current user.</span><br><span class="line">  start-foreground-service [--user &lt;USER_ID&gt; | current] &lt;INTENT&gt;</span><br><span class="line">      Start a foreground Service.  Options are:</span><br><span class="line">      --user &lt;USER_ID&gt; | current: Specify which user to run as; if not</span><br><span class="line">          specified then run as the current user.</span><br><span class="line">  stop-service [--user &lt;USER_ID&gt; | current] &lt;INTENT&gt;</span><br><span class="line">      Stop a Service.  Options are:</span><br><span class="line">      --user &lt;USER_ID&gt; | current: Specify which user to run as; if not</span><br><span class="line">          specified then run as the current user.</span><br><span class="line">  broadcast [--user &lt;USER_ID&gt; | all | current] &lt;INTENT&gt;</span><br><span class="line">      Send a broadcast Intent.  Options are:</span><br><span class="line">      --user &lt;USER_ID&gt; | all | current: Specify which user to send to; if not</span><br><span class="line">          specified then send to all users.</span><br><span class="line">      --receiver-permission &lt;PERMISSION&gt;: Require receiver to hold permission.</span><br><span class="line">  instrument [-r] [-e &lt;NAME&gt; &lt;VALUE&gt;] [-p &lt;FILE&gt;] [-w]</span><br><span class="line">          [--user &lt;USER_ID&gt; | current] [--no-hidden-api-checks]</span><br><span class="line">          [--no-window-animation] [--abi &lt;ABI&gt;] &lt;COMPONENT&gt;</span><br><span class="line">      Start an Instrumentation.  Typically this target &lt;COMPONENT&gt; is in the</span><br><span class="line">      form &lt;TEST_PACKAGE&gt;/&lt;RUNNER_CLASS&gt; or only &lt;TEST_PACKAGE&gt; if there</span><br><span class="line">      is only one instrumentation.  Options are:</span><br><span class="line">      -r: print raw results (otherwise decode REPORT_KEY_STREAMRESULT).  Use with</span><br><span class="line">          [-e perf true] to generate raw output for performance measurements.</span><br><span class="line">      -e &lt;NAME&gt; &lt;VALUE&gt;: set argument &lt;NAME&gt; to &lt;VALUE&gt;.  For test runners a</span><br><span class="line">          common form is [-e &lt;testrunner_flag&gt; &lt;value&gt;[,&lt;value&gt;...]].</span><br><span class="line">      -p &lt;FILE&gt;: write profiling data to &lt;FILE&gt;</span><br><span class="line">      -m: Write output as protobuf to stdout (machine readable)</span><br><span class="line">      -f &lt;Optional PATH/TO/FILE&gt;: Write output as protobuf to a file (machine</span><br><span class="line">          readable). If path is not specified, default directory and file name will</span><br><span class="line">          be used: /sdcard/instrument-logs/log-yyyyMMdd-hhmmss-SSS.instrumentation_data_proto</span><br><span class="line">      -w: wait for instrumentation to finish before returning.  Required for</span><br><span class="line">          test runners.</span><br><span class="line">      --user &lt;USER_ID&gt; | current: Specify user instrumentation runs in;</span><br><span class="line">          current user if not specified.</span><br><span class="line">      --no-hidden-api-checks: disable restrictions on use of hidden API.</span><br><span class="line">      --no-window-animation: turn off window animations while running.</span><br><span class="line">      --abi &lt;ABI&gt;: Launch the instrumented process with the selected ABI.</span><br><span class="line">          This assumes that the process supports the selected ABI.</span><br><span class="line">  trace-ipc [start|stop] [--dump-file &lt;FILE&gt;]</span><br><span class="line">      Trace IPC transactions.</span><br><span class="line">      start: start tracing IPC transactions.</span><br><span class="line">      stop: stop tracing IPC transactions and dump the results to file.</span><br><span class="line">      --dump-file &lt;FILE&gt;: Specify the file the trace should be dumped to.</span><br><span class="line">  profile [start|stop] [--user &lt;USER_ID&gt; current] [--sampling INTERVAL]</span><br><span class="line">          [--streaming] &lt;PROCESS&gt; &lt;FILE&gt;</span><br><span class="line">      Start and stop profiler on a process.  The given &lt;PROCESS&gt; argument</span><br><span class="line">        may be either a process name or pid.  Options are:</span><br><span class="line">      --user &lt;USER_ID&gt; | current: When supplying a process name,</span><br><span class="line">          specify user of process to profile; uses current user if not specified.</span><br><span class="line">      --sampling INTERVAL: use sample profiling with INTERVAL microseconds</span><br><span class="line">          between samples</span><br><span class="line">      --streaming: stream the profiling output to the specified file</span><br><span class="line">  dumpheap [--user &lt;USER_ID&gt; current] [-n] [-g] &lt;PROCESS&gt; &lt;FILE&gt;</span><br><span class="line">      Dump the heap of a process.  The given &lt;PROCESS&gt; argument may</span><br><span class="line">        be either a process name or pid.  Options are:</span><br><span class="line">      -n: dump native heap instead of managed heap</span><br><span class="line">      -g: force GC before dumping the heap</span><br><span class="line">      --user &lt;USER_ID&gt; | current: When supplying a process name,</span><br><span class="line">          specify user of process to dump; uses current user if not specified.</span><br><span class="line">  set-debug-app [-w] [--persistent] &lt;PACKAGE&gt;</span><br><span class="line">      Set application &lt;PACKAGE&gt; to debug.  Options are:</span><br><span class="line">      -w: wait for debugger when application starts</span><br><span class="line">      --persistent: retain this value</span><br><span class="line">  clear-debug-app</span><br><span class="line">      Clear the previously set-debug-app.</span><br><span class="line">  set-watch-heap &lt;PROCESS&gt; &lt;MEM-LIMIT&gt;</span><br><span class="line">      Start monitoring pss size of &lt;PROCESS&gt;, if it is at or</span><br><span class="line">      above &lt;HEAP-LIMIT&gt; then a heap dump is collected for the user to report.</span><br><span class="line">  clear-watch-heap</span><br><span class="line">      Clear the previously set-watch-heap.</span><br><span class="line">  bug-report [--progress | --telephony]</span><br><span class="line">      Request bug report generation; will launch a notification</span><br><span class="line">        when done to select where it should be delivered. Options are:</span><br><span class="line">     --progress: will launch a notification right away to show its progress.</span><br><span class="line">     --telephony: will dump only telephony sections.</span><br><span class="line">  force-stop [--user &lt;USER_ID&gt; | all | current] &lt;PACKAGE&gt;</span><br><span class="line">      Completely stop the given application package.</span><br><span class="line">  crash [--user &lt;USER_ID&gt;] &lt;PACKAGE|PID&gt;</span><br><span class="line">      Induce a VM crash in the specified package or process</span><br><span class="line">  kill [--user &lt;USER_ID&gt; | all | current] &lt;PACKAGE&gt;</span><br><span class="line">      Kill all background processes associated with the given application.</span><br><span class="line">  kill-all</span><br><span class="line">      Kill all processes that are safe to kill (cached, etc).</span><br><span class="line">  make-uid-idle [--user &lt;USER_ID&gt; | all | current] &lt;PACKAGE&gt;</span><br><span class="line">      If the given application's uid is in the background and waiting to</span><br><span class="line">      become idle (not allowing background services), do that now.</span><br><span class="line">  monitor [--gdb &lt;port&gt;]</span><br><span class="line">      Start monitoring for crashes or ANRs.</span><br><span class="line">      --gdb: start gdbserv on the given port at crash/ANR</span><br><span class="line">  watch-uids [--oom &lt;uid&gt;]</span><br><span class="line">      Start watching for and reporting uid state changes.</span><br><span class="line">      --oom: specify a uid for which to report detailed change messages.</span><br><span class="line">  hang [--allow-restart]</span><br><span class="line">      Hang the system.</span><br><span class="line">      --allow-restart: allow watchdog to perform normal system restart</span><br><span class="line">  restart</span><br><span class="line">      Restart the user-space system.</span><br><span class="line">  idle-maintenance</span><br><span class="line">      Perform idle maintenance now.</span><br><span class="line">  screen-compat [on|off] &lt;PACKAGE&gt;</span><br><span class="line">      Control screen compatibility mode of &lt;PACKAGE&gt;.</span><br><span class="line">  package-importance &lt;PACKAGE&gt;</span><br><span class="line">      Print current importance of &lt;PACKAGE&gt;.</span><br><span class="line">  to-uri [INTENT]</span><br><span class="line">      Print the given Intent specification as a URI.</span><br><span class="line">  to-intent-uri [INTENT]</span><br><span class="line">      Print the given Intent specification as an intent: URI.</span><br><span class="line">  to-app-uri [INTENT]</span><br><span class="line">      Print the given Intent specification as an android-app: URI.</span><br><span class="line">  switch-user &lt;USER_ID&gt;</span><br><span class="line">      Switch to put USER_ID in the foreground, starting</span><br><span class="line">      execution of that user if it is currently stopped.</span><br><span class="line">  get-current-user</span><br><span class="line">      Returns id of the current foreground user.</span><br><span class="line">  start-user &lt;USER_ID&gt;</span><br><span class="line">      Start USER_ID in background if it is currently stopped;</span><br><span class="line">      use switch-user if you want to start the user in foreground</span><br><span class="line">  unlock-user &lt;USER_ID&gt; [TOKEN_HEX]</span><br><span class="line">      Attempt to unlock the given user using the given authorization token.</span><br><span class="line">  stop-user [-w] [-f] &lt;USER_ID&gt;</span><br><span class="line">      Stop execution of USER_ID, not allowing it to run any</span><br><span class="line">      code until a later explicit start or switch to it.</span><br><span class="line">      -w: wait for stop-user to complete.</span><br><span class="line">      -f: force stop even if there are related users that cannot be stopped.</span><br><span class="line">  is-user-stopped &lt;USER_ID&gt;</span><br><span class="line">      Returns whether &lt;USER_ID&gt; has been stopped or not.</span><br><span class="line">  get-started-user-state &lt;USER_ID&gt;</span><br><span class="line">      Gets the current state of the given started user.</span><br><span class="line">  track-associations</span><br><span class="line">      Enable association tracking.</span><br><span class="line">  untrack-associations</span><br><span class="line">      Disable and clear association tracking.</span><br><span class="line">  get-uid-state &lt;UID&gt;</span><br><span class="line">      Gets the process state of an app given its &lt;UID&gt;.</span><br><span class="line">  attach-agent &lt;PROCESS&gt; &lt;FILE&gt;</span><br><span class="line">    Attach an agent to the specified &lt;PROCESS&gt;, which may be either a process name or a PID.</span><br><span class="line">  get-config [--days N] [--device] [--proto]</span><br><span class="line">      Retrieve the configuration and any recent configurations of the device.</span><br><span class="line">      --days: also return last N days of configurations that have been seen.</span><br><span class="line">      --device: also output global device configuration info.</span><br><span class="line">      --proto: return result as a proto; does not include --days info.</span><br><span class="line">  supports-multiwindow</span><br><span class="line">      Returns true if the device supports multiwindow.</span><br><span class="line">  supports-split-screen-multi-window</span><br><span class="line">      Returns true if the device supports split screen multiwindow.</span><br><span class="line">  suppress-resize-config-changes &lt;true|false&gt;</span><br><span class="line">      Suppresses configuration changes due to user resizing an activity/task.</span><br><span class="line">  set-inactive [--user &lt;USER_ID&gt;] &lt;PACKAGE&gt; true|false</span><br><span class="line">      Sets the inactive state of an app.</span><br><span class="line">  get-inactive [--user &lt;USER_ID&gt;] &lt;PACKAGE&gt;</span><br><span class="line">      Returns the inactive state of an app.</span><br><span class="line">  set-standby-bucket [--user &lt;USER_ID&gt;] &lt;PACKAGE&gt; active|working_set|frequent|rare</span><br><span class="line">      Puts an app in the standby bucket.</span><br><span class="line">  get-standby-bucket [--user &lt;USER_ID&gt;] &lt;PACKAGE&gt;</span><br><span class="line">      Returns the standby bucket of an app.</span><br><span class="line">  send-trim-memory [--user &lt;USER_ID&gt;] &lt;PROCESS&gt;</span><br><span class="line">          [HIDDEN|RUNNING_MODERATE|BACKGROUND|RUNNING_LOW|MODERATE|RUNNING_CRITICAL|COMPLETE]</span><br><span class="line">      Send a memory trim event to a &lt;PROCESS&gt;.  May also supply a raw trim int level.</span><br><span class="line">  display [COMMAND] [...]: sub-commands for operating on displays.</span><br><span class="line">       move-stack &lt;STACK_ID&gt; &lt;DISPLAY_ID&gt;</span><br><span class="line">           Move &lt;STACK_ID&gt; from its current display to &lt;DISPLAY_ID&gt;.</span><br><span class="line">  stack [COMMAND] [...]: sub-commands for operating on activity stacks.</span><br><span class="line">       start &lt;DISPLAY_ID&gt; &lt;INTENT&gt;</span><br><span class="line">           Start a new activity on &lt;DISPLAY_ID&gt; using &lt;INTENT&gt;</span><br><span class="line">       move-task &lt;TASK_ID&gt; &lt;STACK_ID&gt; [true|false]</span><br><span class="line">           Move &lt;TASK_ID&gt; from its current stack to the top (true) or</span><br><span class="line">           bottom (false) of &lt;STACK_ID&gt;.</span><br><span class="line">       resize &lt;STACK_ID&gt; &lt;LEFT,TOP,RIGHT,BOTTOM&gt;</span><br><span class="line">           Change &lt;STACK_ID&gt; size and position to &lt;LEFT,TOP,RIGHT,BOTTOM&gt;.</span><br><span class="line">       resize-animated &lt;STACK_ID&gt; &lt;LEFT,TOP,RIGHT,BOTTOM&gt;</span><br><span class="line">           Same as resize, but allow animation.</span><br><span class="line">       resize-docked-stack &lt;LEFT,TOP,RIGHT,BOTTOM&gt; [&lt;TASK_LEFT,TASK_TOP,TASK_RIGHT,TASK_BOTTOM&gt;]</span><br><span class="line">           Change docked stack to &lt;LEFT,TOP,RIGHT,BOTTOM&gt;</span><br><span class="line">           and supplying temporary different task bounds indicated by</span><br><span class="line">           &lt;TASK_LEFT,TOP,RIGHT,BOTTOM&gt;</span><br><span class="line">       move-top-activity-to-pinned-stack: &lt;STACK_ID&gt; &lt;LEFT,TOP,RIGHT,BOTTOM&gt;</span><br><span class="line">           Moves the top activity from</span><br><span class="line">           &lt;STACK_ID&gt; to the pinned stack using &lt;LEFT,TOP,RIGHT,BOTTOM&gt; for the</span><br><span class="line">           bounds of the pinned stack.</span><br><span class="line">       positiontask &lt;TASK_ID&gt; &lt;STACK_ID&gt; &lt;POSITION&gt;</span><br><span class="line">           Place &lt;TASK_ID&gt; in &lt;STACK_ID&gt; at &lt;POSITION&gt;</span><br><span class="line">       list</span><br><span class="line">           List all of the activity stacks and their sizes.</span><br><span class="line">       info &lt;WINDOWING_MODE&gt; &lt;ACTIVITY_TYPE&gt;</span><br><span class="line">           Display the information about activity stack in &lt;WINDOWING_MODE&gt; and &lt;ACTIVITY_TYPE&gt;.</span><br><span class="line">       remove &lt;STACK_ID&gt;</span><br><span class="line">           Remove stack &lt;STACK_ID&gt;.</span><br><span class="line">  task [COMMAND] [...]: sub-commands for operating on activity tasks.</span><br><span class="line">       lock &lt;TASK_ID&gt;</span><br><span class="line">           Bring &lt;TASK_ID&gt; to the front and don't allow other tasks to run.</span><br><span class="line">       lock stop</span><br><span class="line">           End the current task lock.</span><br><span class="line">       resizeable &lt;TASK_ID&gt; [0|1|2|3]</span><br><span class="line">           Change resizeable mode of &lt;TASK_ID&gt; to one of the following:</span><br><span class="line">           0: unresizeable</span><br><span class="line">           1: crop_windows</span><br><span class="line">           2: resizeable</span><br><span class="line">           3: resizeable_and_pipable</span><br><span class="line">       resize &lt;TASK_ID&gt; &lt;LEFT,TOP,RIGHT,BOTTOM&gt;</span><br><span class="line">           Makes sure &lt;TASK_ID&gt; is in a stack with the specified bounds.</span><br><span class="line">           Forces the task to be resizeable and creates a stack if no existing stack</span><br><span class="line">           has the specified bounds.</span><br><span class="line">  update-appinfo &lt;USER_ID&gt; &lt;PACKAGE_NAME&gt; [&lt;PACKAGE_NAME&gt;...]</span><br><span class="line">      Update the ApplicationInfo objects of the listed packages for &lt;USER_ID&gt;</span><br><span class="line">      without restarting any processes.</span><br><span class="line">  write</span><br><span class="line">      Write all pending state to storage.</span><br><span class="line"></span><br><span class="line">&lt;INTENT&gt; specifications include these flags and arguments:</span><br><span class="line">    [-a &lt;ACTION&gt;] [-d &lt;DATA_URI&gt;] [-t &lt;MIME_TYPE&gt;]</span><br><span class="line">    [-c &lt;CATEGORY&gt; [-c &lt;CATEGORY&gt;] ...]</span><br><span class="line">    [-n &lt;COMPONENT_NAME&gt;]</span><br><span class="line">    [-e|--es &lt;EXTRA_KEY&gt; &lt;EXTRA_STRING_VALUE&gt; ...]</span><br><span class="line">    [--esn &lt;EXTRA_KEY&gt; ...]</span><br><span class="line">    [--ez &lt;EXTRA_KEY&gt; &lt;EXTRA_BOOLEAN_VALUE&gt; ...]</span><br><span class="line">    [--ei &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt; ...]</span><br><span class="line">    [--el &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt; ...]</span><br><span class="line">    [--ef &lt;EXTRA_KEY&gt; &lt;EXTRA_FLOAT_VALUE&gt; ...]</span><br><span class="line">    [--eu &lt;EXTRA_KEY&gt; &lt;EXTRA_URI_VALUE&gt; ...]</span><br><span class="line">    [--ecn &lt;EXTRA_KEY&gt; &lt;EXTRA_COMPONENT_NAME_VALUE&gt;]</span><br><span class="line">    [--eia &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt;[,&lt;EXTRA_INT_VALUE...]]</span><br><span class="line">        (mutiple extras passed as Integer[])</span><br><span class="line">    [--eial &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt;[,&lt;EXTRA_INT_VALUE...]]</span><br><span class="line">        (mutiple extras passed as List&lt;Integer&gt;)</span><br><span class="line">    [--ela &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt;[,&lt;EXTRA_LONG_VALUE...]]</span><br><span class="line">        (mutiple extras passed as Long[])</span><br><span class="line">    [--elal &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt;[,&lt;EXTRA_LONG_VALUE...]]</span><br><span class="line">        (mutiple extras passed as List&lt;Long&gt;)</span><br><span class="line">    [--efa &lt;EXTRA_KEY&gt; &lt;EXTRA_FLOAT_VALUE&gt;[,&lt;EXTRA_FLOAT_VALUE...]]</span><br><span class="line">        (mutiple extras passed as Float[])</span><br><span class="line">    [--efal &lt;EXTRA_KEY&gt; &lt;EXTRA_FLOAT_VALUE&gt;[,&lt;EXTRA_FLOAT_VALUE...]]</span><br><span class="line">        (mutiple extras passed as List&lt;Float&gt;)</span><br><span class="line">    [--esa &lt;EXTRA_KEY&gt; &lt;EXTRA_STRING_VALUE&gt;[,&lt;EXTRA_STRING_VALUE...]]</span><br><span class="line">        (mutiple extras passed as String[]; to embed a comma into a string,</span><br><span class="line">         escape it using "\,")</span><br><span class="line">    [--esal &lt;EXTRA_KEY&gt; &lt;EXTRA_STRING_VALUE&gt;[,&lt;EXTRA_STRING_VALUE...]]</span><br><span class="line">        (mutiple extras passed as List&lt;String&gt;; to embed a comma into a string,</span><br><span class="line">         escape it using "\,")</span><br><span class="line">    [-f &lt;FLAG&gt;]</span><br><span class="line">    [--grant-read-uri-permission] [--grant-write-uri-permission]</span><br><span class="line">    [--grant-persistable-uri-permission] [--grant-prefix-uri-permission]</span><br><span class="line">    [--debug-log-resolution] [--exclude-stopped-packages]</span><br><span class="line">    [--include-stopped-packages]</span><br><span class="line">    [--activity-brought-to-front] [--activity-clear-top]</span><br><span class="line">    [--activity-clear-when-task-reset] [--activity-exclude-from-recents]</span><br><span class="line">    [--activity-launched-from-history] [--activity-multiple-task]</span><br><span class="line">    [--activity-no-animation] [--activity-no-history]</span><br><span class="line">    [--activity-no-user-action] [--activity-previous-is-top]</span><br><span class="line">    [--activity-reorder-to-front] [--activity-reset-task-if-needed]</span><br><span class="line">    [--activity-single-top] [--activity-clear-task]</span><br><span class="line">    [--activity-task-on-home] [--activity-match-external]</span><br><span class="line">    [--receiver-registered-only] [--receiver-replace-pending]</span><br><span class="line">    [--receiver-foreground] [--receiver-no-abort]</span><br><span class="line">    [--receiver-include-background]</span><br><span class="line">    [--selector]</span><br><span class="line">    [&lt;URI&gt; | &lt;PACKAGE&gt; | &lt;COMPONENT&gt;]</span><br></pre></td></tr></table></figure><p>命令列表</p><table><thead><tr><th>命令</th><th>功能</th><th>实现方法</th></tr></thead><tbody><tr><td>am start [options]</td><td>启动Activity</td><td>startActivityAsUser</td></tr><tr><td>am startservice</td><td>启动Service</td><td>startService</td></tr><tr><td>am stopservice</td><td>停止Service</td><td>stopService</td></tr><tr><td>am broadcast</td><td>发送广播</td><td>broadcastIntent</td></tr><tr><td>am restart</td><td>重启</td><td>restart</td></tr><tr><td>am dumpheap &lt;pid&gt; &lt;file&gt;</td><td>进程pid的堆信息输出到file</td><td>dumpheap</td></tr><tr><td>am send-trim-memory &lt;pid&gt; &lt;level&gt;</td><td>收紧进程的内存</td><td>setProcessMemoryTrimLevel</td></tr><tr><td>am kill &lt;PACKAGE&gt;</td><td>杀指定后台进程</td><td>killBackgroundProcesses</td></tr><tr><td>am kill-all</td><td>杀所有后台进程</td><td>killAllBackgroundProcesses</td></tr><tr><td>am force-stop &lt;PACKAGE&gt;</td><td>强杀进程</td><td>forceStopPackage</td></tr><tr><td>am hang</td><td>系统卡住</td><td>hang</td></tr><tr><td>am monitor</td><td>监控</td><td>MyActivityController.run</td></tr></tbody></table><p><strong>原理分析：am命令实的实现方式在Am.java，最终几乎都是调用ActivityManagerService相应的方法来完成的，am monitor除外。比如前面概述中介绍的命令am start -a android.intent.action.VIEW -d <a href="https://amberweather.com，" target="_blank" rel="noopener">https://amberweather.com，</a> 启动Acitivty最终调用的是ActivityManagerService类的startActivityAsUser()方法来完成的。再比如am kill-all命令，最终的实现工作是由ActivityManagerService的killBackgroundProcesses()方法完成的。</strong></p><h1 id="启动Activity"><a href="#启动Activity" class="headerlink" title="启动Activity"></a>启动Activity</h1><p>主要是启动Activity命令am start [options] <INTENT>使用options参数，接下来列举Activity命令的[options]参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-D:开启debug模式</span><br><span class="line">-W：等待启动完成</span><br><span class="line">--start-profiler&lt;FILE&gt;：将profiler中的结果输出到指定文件中</span><br><span class="line">-P：和--start-profiler一样，区别在于，在app进入idle状态时profiler结束</span><br><span class="line">-R &lt;Count&gt;： 重复启动Activity，但每次重复启动都会关闭掉最上面的Activity</span><br><span class="line">-S:关闭Activity所属的App进程后再启动Activity</span><br><span class="line">--opengl-trace:开启OpenGL tracing</span><br><span class="line">--user &lt;USER_ID&gt; ：使用指定的用户来启动activity，如果不输入，则使用当前用户执行</span><br></pre></td></tr></table></figure><p>启动Activity的实现原理： 存在-W参数则调用startActivityAndWait()方法来运行，否则startActivityAsUser()。</p><h1 id="收紧内存"><a href="#收紧内存" class="headerlink" title="收紧内存"></a>收紧内存</h1><p>例如： 向pid=12345的进程，发出level=RUNNING_LOW的收紧内存命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">am send-trim-memory 12345 RUNNING_LOW</span><br></pre></td></tr></table></figure><p>level取值范围为： <code>HIDDEN</code>、<code>RUNNING_MODERATE</code>、<code>BACKGROUND</code>、<code>RUNNING_LOW</code>、<code>MODERATE</code>、<code>RUNNING_CRITICAL</code>、<code>COMPLETE</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简单介绍&quot;&gt;&lt;a href=&quot;#简单介绍&quot; class=&quot;headerlink&quot; title=&quot;简单介绍&quot;&gt;&lt;/a&gt;简单介绍&lt;/h1&gt;&lt;p&gt;am指令是 activity manager的缩写，可以启动Service、Broadcast，杀进程，监控等功能，这些功能都非常便捷调试程序。&lt;/p&gt;
&lt;p&gt;可以通过adb shell 进入Android 的Linux命令界面，输入am -help查看详细命令，先介绍几个简单用法.&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//使用Action方式打开系统设置-输入法设置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;am start -a android.settings.INPUT_METHOD_SETTINGS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//使用Action方式打开网站https://amberweather.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;am start -a android.intent.action.VIEW -d  https://amberweather.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//打开拨号界面，并传递一个DATA_URI数据给拨号界面&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;am start -a android.intent.action.CALL -d tel:10086&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://william-hl1991.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://william-hl1991.github.io/tags/Android/"/>
    
      <category term="测试" scheme="https://william-hl1991.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Xcode Instruments 命令行方式调用</title>
    <link href="https://william-hl1991.github.io/2019/03/22/Xcode-Instruments-%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%96%B9%E5%BC%8F%E8%B0%83%E7%94%A8/"/>
    <id>https://william-hl1991.github.io/2019/03/22/Xcode-Instruments-%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%96%B9%E5%BC%8F%E8%B0%83%E7%94%A8/</id>
    <published>2019-03-22T09:20:49.000Z</published>
    <updated>2020-04-22T12:02:40.231Z</updated>
    
    <content type="html"><![CDATA[<p>已经研究过<code>appium+xcode10</code>方式启动任意应用，之后通过<code>TraceUlity</code>解析<code>trace</code>数据获取性能数据，当然在ppt中也写过，知其然知其所以然，appium是通过<code>Instruments -w udid -t Activity Monitor -D /var/folders/kd/6rx5zx0933jbprw8dygcr4s40000gn/T/20181120-93821-1u26x7f.vt4y/appium_perf_Activity_Monitor_1545301850892.trace -l 60000 -p 12620</code>来启动instrument录制性能的。那么顺势就研究一下如何通过命令行启动instruments吧！</p><a id="more"></a><h2 id="基本使用方式"><a href="#基本使用方式" class="headerlink" title="基本使用方式"></a>基本使用方式</h2><p>查看<code>instruments</code>的使用帮助：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MacBook-Pro:~ william$ instruments</span><br><span class="line">instruments, version <span class="number">10.2</span> (<span class="number">64490.65</span>)</span><br><span class="line">usage: instruments [-t template] [-D <span class="built_in">document</span>] [-l timeLimit] [-w device] [-P package] [[-p pid] | [application [-e variable value] [argument ...]]]</span><br></pre></td></tr></table></figure><ul><li><code>-t</code>是指定模板</li><li><code>-D</code>生成的<code>.trace</code>文件名和位置</li><li><code>-l</code>指定运行时间，此处单位为<code>ms</code></li><li><code>-w</code> 指定设备id</li><li><code>-P</code> 指定包名：如贴吧的 ：<code>com.baidu.tieba</code></li><li><code>-p</code> 指定程序的<code>pid</code>，pid再运行的时候不好拿到，可以直接写名称，如贴吧的可以写<code>TBClient.app</code></li><li><code>-e</code> UIASCRIPT <code>&lt;path_to_script.js&gt;</code> </li><li><code>-e</code> UIARESULTSPATH <code>&lt;output_results_path&gt;</code><br>上面的两个<code>-e</code>需要配合起来使用分别是：指定运行的 <code>js</code> 脚本存放的位置和指定输出结果存放的路径。<code>xcode</code>换成<code>xctes</code>t之后<code>-e</code> 一般都不用于移动端测试。<br><code>-t</code>指定模板的时候最好不要使用固定路径，要使用模板的名称，因为每次更新xcode，模板的路径位置就会发生改变。</li></ul><h2 id="如何查找模板名称"><a href="#如何查找模板名称" class="headerlink" title="如何查找模板名称"></a>如何查找模板名称</h2><ol><li><p>可以通过<code>instruments GUI</code>上的名称来写。<br><img src="https://raw.githubusercontent.com/William-HL1991/BlogAlbum/master/GUI.png" alt="GUI"></p></li><li><p>通过查找模板的位置来确定<br>切换到instruments的目录，<code>/Applications/Xcode.app/Contents/Applications/Instruments.app</code>通过终端查找<code>find ./ -name *.tracetemplate</code>：<br><img src="https://raw.githubusercontent.com/William-HL1991/BlogAlbum/master/find.png" alt="终端查找"><br>查看<code>.tracetemplate</code>前的名称来确定。</p></li><li><p>更简单的方式，通过instruments命令：在终端输入<code>instruments -s</code><br>然后查看最后<code>Known Templates:</code>来确定模板的名称。<br><img src="https://raw.githubusercontent.com/William-HL1991/BlogAlbum/master/instrumen-s.png" alt="instrumens命令!"></p></li></ol><h2 id="高阶用法"><a href="#高阶用法" class="headerlink" title="高阶用法"></a>高阶用法</h2><p>同时监控好几个模板，导出一个数据自己的<code>.tracetemplate</code>文件。</p><ol><li>首先打开<code>instruments</code>，在主界面选择需要测试的模板,如下图，通过右上角的<code>+</code>添加。<br><img src="https://raw.githubusercontent.com/William-HL1991/BlogAlbum/master/sub-temp.png" alt="多模板!"></li><li>选择完所有需要的模板后，点击Instruments -&gt; file -&gt; Save As Template 保存，记录好模板的名称。</li><li>然后就可以用自己的模板进行测试。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;已经研究过&lt;code&gt;appium+xcode10&lt;/code&gt;方式启动任意应用，之后通过&lt;code&gt;TraceUlity&lt;/code&gt;解析&lt;code&gt;trace&lt;/code&gt;数据获取性能数据，当然在ppt中也写过，知其然知其所以然，appium是通过&lt;code&gt;Instruments -w udid -t Activity Monitor -D /var/folders/kd/6rx5zx0933jbprw8dygcr4s40000gn/T/20181120-93821-1u26x7f.vt4y/appium_perf_Activity_Monitor_1545301850892.trace -l 60000 -p 12620&lt;/code&gt;来启动instrument录制性能的。那么顺势就研究一下如何通过命令行启动instruments吧！&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://william-hl1991.github.io/categories/iOS/"/>
    
    
      <category term="测试" scheme="https://william-hl1991.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="iOS" scheme="https://william-hl1991.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>RESETful API设计规范</title>
    <link href="https://william-hl1991.github.io/2019/02/28/RESETful-API%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/"/>
    <id>https://william-hl1991.github.io/2019/02/28/RESETful-API%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/</id>
    <published>2019-02-28T09:59:37.000Z</published>
    <updated>2020-04-22T10:02:48.427Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章主要记录目前比较流行的 <code>RESTful api</code> 设计规范，为后续开发各种平台提供接口设计规范。</p><a id="more"></a><h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ul><li><a href="#restful-api-设计规范">RESTful API 设计规范</a></li><li><a href="#关于能愿动词的使用">关于「能愿动词」的使用</a></li><li><a href="#protocol">Protocol</a></li><li><a href="#api-root-url">API Root URL</a></li><li><a href="#versioning">Versioning</a><ul><li><a href="#在-url-中嵌入版本编号">在 URL 中嵌入版本编号</a></li><li><a href="#通过媒体类型来指定版本信息">通过媒体类型来指定版本信息</a></li></ul></li><li><a href="#endpoints">Endpoints</a></li><li><a href="#http-动词">HTTP 动词</a></li><li><a href="#filtering">Filtering</a></li><li><a href="#authentication">Authentication</a></li><li><a href="#response">Response</a><ul><li><a href="#200-ok">200 ok</a></li><li><a href="#201-created">201 Created</a></li><li><a href="#202-accepted">202 Accepted</a></li><li><a href="#204-no-content">204 No Content</a></li><li><a href="#3xx-重定向">3xx 重定向</a></li><li><a href="#400-bad-request">400 Bad Request</a></li><li><a href="#401-unauthorized">401 Unauthorized</a></li><li><a href="#403-forbidden">403 Forbidden</a></li><li><a href="#404-not-found">404 Not Found</a></li><li><a href="#405-method-not-allowd">405 Method Not Allowd</a></li><li><a href="#406-not-acceptable">406 Not Acceptable</a></li><li><a href="#408-request-timeout">408 Request Timeout</a></li><li><a href="#409-gonfilct">409 Gonfilct</a></li><li><a href="#410-gone">410 Gone</a></li><li><a href="#413-request-entity-too-large">413 Request Entity Too Large</a></li><li><a href="#414-request-uri-too-long">414 Request-URI Too Long</a></li><li><a href="#415-unsupported-media-type">415 Unsupported Media Type</a></li><li><a href="#429-too-many-request">429 Too Many Request</a></li><li><a href="#500-internal-server-error">500 Internal Server Error</a></li><li><a href="#503-service-unavailable">503 Service Unavailable</a></li></ul></li><li><a href="#建议参考">建议参考</a></li></ul><h2 id="关于「能愿动词」的使用"><a href="#关于「能愿动词」的使用" class="headerlink" title="关于「能愿动词」的使用"></a>关于「能愿动词」的使用</h2><p>为了避免歧义，文档大量使用了「能愿动词」，对应的解释如下：</p><ul><li><code>必须 (MUST)</code>：绝对，严格遵循，请照做，无条件遵守；</li><li><code>一定不可 (MUST NOT)</code>：禁令，严令禁止；</li><li><code>应该 (SHOULD)</code> ：强烈建议这样做，但是不强求；</li><li><code>不该 (SHOULD NOT)</code>：强烈不建议这样做，但是不强求；</li><li><code>可以 (MAY)</code> 和 <code>可选 (OPTIONAL)</code> ：选择性高一点，在这个文档内，此词语使用较少；</li></ul><blockquote><p>参见：<a href="http://www.ietf.org/rfc/rfc2119.txt" target="_blank" rel="noopener">RFC 2119</a></p></blockquote><h2 id="Protocol"><a href="#Protocol" class="headerlink" title="Protocol"></a>Protocol</h2><p>客户端在通过 <code>API</code> 与后端服务通信的过程中，<code>应该</code> 使用 <code>HTTPS</code> 协议。</p><h2 id="API-Root-URL"><a href="#API-Root-URL" class="headerlink" title="API Root URL"></a>API Root URL</h2><p><code>API</code> 的根入口点应尽可能保持足够简单，这里有两个常见的 <code>URL</code> 根例子：</p><ul><li>api.example.com/*</li><li>example.com/api/*</li></ul><blockquote><p>如果你的应用很庞大或者你预计它将会变的很庞大，那 <code>应该</code> 将 <code>API</code> 放到子域下（<code>api.example.com</code>）。这种做法可以保持某些规模化上的灵活性。</p></blockquote><h2 id="Versioning"><a href="#Versioning" class="headerlink" title="Versioning"></a>Versioning</h2><p>所有的 <code>API</code> 必须保持向后兼容，你 <code>必须</code> 在引入新版本 <code>API</code> 的同时确保旧版本 <code>API</code> 仍然可用。所以 <code>应该</code> 为其提供版本支持。</p><p>目前比较常见的两种版本号形式：</p><h3 id="在-URL-中嵌入版本编号"><a href="#在-URL-中嵌入版本编号" class="headerlink" title="在 URL 中嵌入版本编号"></a>在 URL 中嵌入版本编号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">api.example.com/v1/*</span><br></pre></td></tr></table></figure><p>这种做法是版本号直观、易于调试；另一种做法是，将版本号放在 <code>HTTP Header</code> 头中：</p><h3 id="通过媒体类型来指定版本信息"><a href="#通过媒体类型来指定版本信息" class="headerlink" title="通过媒体类型来指定版本信息"></a>通过媒体类型来指定版本信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Accept: application/vnd.example.com.v1+json</span><br></pre></td></tr></table></figure><p>其中 <code>vnd</code> 表示 <code>Standards Tree</code> 标准树类型，有三个不同的树: <code>x</code>，<code>prs</code> 和 <code>vnd</code>。你使用的标准树需要取决于你开发的项目</p><ul><li>未注册的树（<code>x</code>）主要表示本地和私有环境</li><li>私有树（<code>prs</code>）主要表示没有商业发布的项目</li><li>供应商树（<code>vnd</code>）主要表示公开发布的项目</li></ul><blockquote><p>后面几个参数依次为应用名称（一般为应用域名）、版本号、期望的返回格式。</p></blockquote><p>至于具体把版本号放在什么地方，这个问题一直存在很大的争议，采用第二种方式来管理 <code>API</code> 版本更好，并且已集成了标准的 <code>HTTP Response</code>。</p><h2 id="Endpoints"><a href="#Endpoints" class="headerlink" title="Endpoints"></a>Endpoints</h2><p>端点就是指向特定资源或资源集合的 <code>URL</code>。在端点的设计中，你 <code>必须</code> 遵守下列约定：</p><ul><li>URL 的命名 <code>必须</code> 全部小写</li><li>URL 中资源（<code>resource</code>）的命名 <code>必须</code> 是名词，并且 <code>必须</code> 是复数形式</li><li><code>必须</code> 优先使用 <code>Restful</code> 类型的 URL</li><li>URL <code>必须</code> 是易读的</li><li>URL <code>一定不可</code> 暴露服务器架构</li></ul><blockquote><p>至于 URL 是否必须使用连字符（<code>-</code>） 或下划线（<code>_</code>），不做硬性规定，但 <code>必须</code> 根据团队情况统一一种风格。</p></blockquote><p>来看一个反例</p><ul><li><a href="https://api.example.com/getUserInfo?userid=1" target="_blank" rel="noopener">https://api.example.com/getUserInfo?userid=1</a></li><li><a href="https://api.example.com/getusers" target="_blank" rel="noopener">https://api.example.com/getusers</a></li><li><a href="https://api.example.com/sv/u" target="_blank" rel="noopener">https://api.example.com/sv/u</a></li><li><a href="https://api.example.com/cgi-bin/users/get_user.php?userid=1" target="_blank" rel="noopener">https://api.example.com/cgi-bin/users/get_user.php?userid=1</a></li></ul><p>再来看一个正列</p><ul><li><a href="https://api.example.com/zoos" target="_blank" rel="noopener">https://api.example.com/zoos</a></li><li><a href="https://api.example.com/animals" target="_blank" rel="noopener">https://api.example.com/animals</a></li><li><a href="https://api.example.com/zoos/{zoo}/animals" target="_blank" rel="noopener">https://api.example.com/zoos/{zoo}/animals</a></li><li><a href="https://api.example.com/animal_types" target="_blank" rel="noopener">https://api.example.com/animal_types</a></li><li><a href="https://api.example.com/employees" target="_blank" rel="noopener">https://api.example.com/employees</a></li></ul><h2 id="HTTP-动词"><a href="#HTTP-动词" class="headerlink" title="HTTP 动词"></a>HTTP 动词</h2><p>对于资源的具体操作类型，由 <code>HTTP</code> 动词表示。常用的 <code>HTTP</code> 动词有下面五个（括号里是对应的 <code>SQL</code> 命令）。</p><ul><li>GET（SELECT）：从服务器取出资源（一项或多项）。</li><li>POST（CREATE）：在服务器新建一个资源。</li><li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</li><li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</li><li>DELETE（DELETE）：从服务器删除资源。</li></ul><p>其中</p><p>1 删除资源 <code>必须</code> 用 <code>DELETE</code> 方法<br>2 创建新的资源 <code>必须</code> 使用 <code>POST</code> 方法<br>3 更新资源 <code>应该</code> 使用 <code>PUT</code> 方法<br>4 获取资源信息 <code>必须</code> 使用 <code>GET</code> 方法</p><p>针对每一个端点来说，下面列出所有可行的 <code>HTTP</code> 动词和端点的组合</p><table><thead><tr><th>请求方法</th><th>URL</th><th>描述</th></tr></thead><tbody><tr><td>GET</td><td>/zoos</td><td>列出所有的动物园(ID和名称，不要太详细)</td></tr><tr><td>POST</td><td>/zoos</td><td>新增一个新的动物园</td></tr><tr><td>GET</td><td>/zoos/{zoo}</td><td>获取指定动物园详情</td></tr><tr><td>PUT</td><td>/zoos/{zoo}</td><td>更新指定动物园(整个对象)</td></tr><tr><td>PATCH</td><td>/zoos/{zoo}</td><td>更新动物园(部分对象)</td></tr><tr><td>DELETE</td><td>/zoos/{zoo}</td><td>删除指定动物园</td></tr><tr><td>GET</td><td>/zoos/{zoo}/animals</td><td>检索指定动物园下的动物列表(ID和名称，不要太详细)</td></tr><tr><td>GET</td><td>/animals</td><td>列出所有动物(ID和名称)。</td></tr><tr><td>POST</td><td>/animals</td><td>新增新的动物</td></tr><tr><td>GET</td><td>/animals/{animal}</td><td>获取指定的动物详情</td></tr><tr><td>PUT</td><td>/animals/{animal}</td><td>更新指定的动物(整个对象)</td></tr><tr><td>PATCH</td><td>/animals/{animal}</td><td>更新指定的动物(部分对象)</td></tr><tr><td>GET</td><td>/animal_types</td><td>获取所有动物类型(ID和名称，不要太详细)</td></tr><tr><td>GET</td><td>/animal_types/{type}</td><td>获取指定的动物类型详情</td></tr><tr><td>GET</td><td>/employees</td><td>检索整个雇员列表</td></tr><tr><td>GET</td><td>/employees/{employee}</td><td>检索指定特定的员工</td></tr><tr><td>GET</td><td>/zoos/{zoo}/employees</td><td>检索在这个动物园工作的雇员的名单(身份证和姓名)</td></tr><tr><td>POST</td><td>/employees</td><td>新增指定新员工</td></tr><tr><td>POST</td><td>/zoos/{zoo}/employees</td><td>在特定的动物园雇佣一名员工</td></tr><tr><td>DELETE</td><td>/zoos/{zoo}/employees/{employee}</td><td>从某个动物园解雇一名员工</td></tr></tbody></table><blockquote><p>超出 <code>Restful</code> 端点的，<code>应该</code> 模仿上表的方式来定义端点。</p></blockquote><h2 id="Filtering"><a href="#Filtering" class="headerlink" title="Filtering"></a>Filtering</h2><blockquote><p>如果记录数量很多，服务器不可能都将它们返回给用户。API <code>应该</code> 提供参数，过滤返回结果。下面是一些常见的参数。</p></blockquote><ul><li>?limit=10：指定返回记录的数量</li><li>?offset=10：指定返回记录的开始位置。</li><li>?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</li><li>?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</li><li>?animal_type_id=1：指定筛选条件</li></ul><p>所有 <code>URL</code> 参数 <code>必须</code> 是全小写，<code>必须</code> 使用下划线类型的参数形式。</p><blockquote><p>分页参数 <code>必须</code> 固定为 <code>page</code>、<code>per_page</code></p></blockquote><p>经常使用的、复杂的查询 <code>应该</code> 标签化，降低维护成本。如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /trades?status=closed&amp;sort=sortby=name&amp;order=asc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可为其定制快捷方式</span></span><br><span class="line">GET /trades/recently_closed</span><br></pre></td></tr></table></figure><h2 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h2><p><code>应该</code> 使用 <code>OAuth2.0</code> 的方式为 API 调用者提供登录认证。<code>必须</code> 先通过登录接口获取 <code>Access Token</code> 后再通过该 <code>token</code> 调用需要身份认证的 <code>API</code>。</p><p>Oauth 的端点设计示列</p><ul><li>RFC 6749   /token</li><li>Twitter    /oauth2/token</li><li>Fackbook   /oauth/access_token</li><li>Google     /o/oauth2/token</li><li>Github     /login/oauth/access_token</li><li>Instagram  /oauth/authorize</li></ul><p>客户端在获得 <code>access token</code> 的同时 <code>必须</code> 在响应中包含一个名为 <code>expires_in</code> 的数据，它表示当前获得的 <code>token</code> 会在多少 <code>秒</code> 后失效。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"access_token"</span>: <span class="string">"token...."</span>,</span><br><span class="line">    <span class="attr">"token_type"</span>: <span class="string">"Bearer"</span>,</span><br><span class="line">    <span class="attr">"expires_in"</span>: <span class="number">3600</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端在请求需要认证的 <code>API</code> 时，<code>必须</code> 在请求头 <code>Authorization</code> 中带上 <code>access_token</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization: Bearer token...</span><br></pre></td></tr></table></figure><p>当超过指定的秒数后，<code>access token</code> 就会过期，再次用过期/或无效的 <code>token</code> 访问时，服务端 <code>应该</code> 返回 <code>invalid_token</code> 的错误或 <code>401</code> 错误码。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">401</span> Unauthorized</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-store</span><br><span class="line"><span class="attribute">Pragma</span>: no-cache</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    "error": "invalid_token"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Laravel 开发中，<code>应该</code> 使用 <a href="https://github.com/tymondesigns/jwt-auth" target="_blank" rel="noopener">JWT</a> 来为管理你的 Token，并且 <code>一定不可</code> 在 <code>api</code> 中间件中开启请求 <code>session</code>。</p></blockquote><h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><p>所有的 <code>API</code> 响应，<code>必须</code> 遵守 <code>HTTP</code> 设计规范，<code>必须</code> 选择合适的 <code>HTTP</code> 状态码。<code>一定不可</code> 所有接口都返回状态码为 <code>200</code> 的 <code>HTTP</code> 响应，如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> ok</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Server</span>: example.com</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    "code": 0,</span><br><span class="line">    "msg": "success",</span><br><span class="line">    "data": &#123;</span><br><span class="line">        "username": "username"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> ok</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Server</span>: example.com</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    "code": -1,</span><br><span class="line">    "msg": "该活动不存在",</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下表列举了常见的 <code>HTTP</code> 状态码</p><table><thead><tr><th>状态码</th><th>描述</th></tr></thead><tbody><tr><td>1xx</td><td>代表请求已被接受，需要继续处理</td></tr><tr><td>2xx</td><td>请求已成功，请求所希望的响应头或数据体将随此响应返回</td></tr><tr><td>3xx</td><td>重定向</td></tr><tr><td>4xx</td><td>客户端原因引起的错误</td></tr><tr><td>5xx</td><td>服务端原因引起的错误</td></tr></tbody></table><blockquote><p>只有来自客户端的请求被正确的处理后才能返回 <code>2xx</code> 的响应，所以当 API 返回 <code>2xx</code> 类型的状态码时，前端 <code>必须</code> 认定该请求已处理成功。</p></blockquote><p>必须强调的是，所有 <code>API</code> <code>一定不可</code> 返回 <code>1xx</code> 类型的状态码。当 <code>API</code> 发生错误时，<code>必须</code> 返回出错时的详细信息。目前常见返回错误信息的方法有两种：</p><p>1、将错误详细放入 <code>HTTP</code> 响应首部；</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">X-MYNAME-ERROR-CODE</span>: 4001</span><br><span class="line"><span class="attribute">X-MYNAME-ERROR-MESSAGE</span>: Bad authentication token</span><br><span class="line"><span class="attribute">X-MYNAME-ERROR-INFO</span>: http://docs.example.com/api/v1/authentication</span><br></pre></td></tr></table></figure><p>2、直接放入响应实体中；</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">401</span> Unauthorized</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache, private</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 10:02:59 GMT</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;"error_code":40100,"message":"Unauthorized"&#125;</span><br></pre></td></tr></table></figure><p>考虑到易读性和客户端的易处理性，我们 <code>必须</code> 把错误信息直接放到响应实体中，并且错误格式 <code>应该</code> 满足如下格式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"您查找的资源不存在"</span>,</span><br><span class="line">    <span class="attr">"error_code"</span>: <span class="number">404001</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中错误码（<code>error_code</code>）<code>必须</code> 和 <code>HTTP</code> 状态码对应，也方便错误码归类，如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">429</span> Too Many Requests</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache, private</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 10:15:52 GMT</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;"error_code":429001,"message":"你操作太频繁了"&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">403</span> Forbidden</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache, private</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 10:19:27 GMT</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;"error_code":403002,"message":"用户已禁用"&#125;</span><br></pre></td></tr></table></figure><p><code>应该</code> 在返回的错误信息中，同时包含面向开发者和面向用户的提示信息，前者可方便开发人员调试，后者可直接展示给终端用户查看如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"直接展示给终端用户的错误信息"</span>,</span><br><span class="line">    <span class="attr">"error_code"</span>: <span class="string">"业务错误码"</span>,</span><br><span class="line">    <span class="attr">"error"</span>: <span class="string">"供开发者查看的错误信息"</span>,</span><br><span class="line">    <span class="attr">"debug"</span>: [</span><br><span class="line">        <span class="string">"错误堆栈，必须开启 debug 才存在"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面详细列举了各种情况 API 的返回说明。</p><h3 id="200-ok"><a href="#200-ok" class="headerlink" title="200 ok"></a>200 ok</h3><p><code>200</code> 状态码是最常见的 <code>HTTP</code> 状态码，在所有 <strong>成功</strong> 的 <code>GET</code> 请求中，<code>必须</code> 返回此状态码。<code>HTTP</code> 响应实体部分 <code>必须</code> 直接就是数据，不要做多余的包装。</p><p>错误示例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> ok</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Server</span>: example.com</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    "user": &#123;</span><br><span class="line">        "id":1,</span><br><span class="line">        "nickname":"fwest",</span><br><span class="line">        "username": "example"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确示例：</p><p>1、获取单个资源详情</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"username"</span>: <span class="string">"godruoyi"</span>,</span><br><span class="line">    <span class="attr">"age"</span>: <span class="number">88</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、获取资源集合</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"username"</span>: <span class="string">"godruoyi"</span>,</span><br><span class="line">        <span class="attr">"age"</span>: <span class="number">88</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"username"</span>: <span class="string">"foo"</span>,</span><br><span class="line">        <span class="attr">"age"</span>: <span class="number">88</span>,</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>3、额外的媒体信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"data"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"avatar"</span>: <span class="string">"https://lorempixel.com/640/480/?32556"</span>,</span><br><span class="line">            <span class="attr">"nickname"</span>: <span class="string">"fwest"</span>,</span><br><span class="line">            <span class="attr">"last_logined_time"</span>: <span class="string">"2018-05-29 04:56:43"</span>,</span><br><span class="line">            <span class="attr">"has_registed"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"avatar"</span>: <span class="string">"https://lorempixel.com/640/480/?86144"</span>,</span><br><span class="line">            <span class="attr">"nickname"</span>: <span class="string">"zschowalter"</span>,</span><br><span class="line">            <span class="attr">"last_logined_time"</span>: <span class="string">"2018-06-16 15:18:34"</span>,</span><br><span class="line">            <span class="attr">"has_registed"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"meta"</span>: &#123;</span><br><span class="line">        <span class="attr">"pagination"</span>: &#123;</span><br><span class="line">            <span class="attr">"total"</span>: <span class="number">101</span>,</span><br><span class="line">            <span class="attr">"count"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"per_page"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"current_page"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"total_pages"</span>: <span class="number">51</span>,</span><br><span class="line">            <span class="attr">"links"</span>: &#123;</span><br><span class="line">                <span class="attr">"next"</span>: <span class="string">"http://api.example.com?page=2"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其中，分页和其他额外的媒体信息，必须放到 <code>meta</code> 字段中。</p></blockquote><h3 id="201-Created"><a href="#201-Created" class="headerlink" title="201 Created"></a>201 Created</h3><p>当服务器创建数据成功时，<code>应该</code> 返回此状态码。常见的应用场景是使用 <code>POST</code> 提交用户信息，如：</p><ul><li>添加了新用户</li><li>上传了图片</li><li>创建了新活动</li></ul><p>等，都可以返回 <code>201</code> 状态码。需要注意的是，你可以选择在用户创建成功后返回新用户的数据</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">201</span> Created</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 09:13:40 GMT</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    "id": 1,</span><br><span class="line">    "avatar": "https:\/\/lorempixel.com\/640\/480\/?32556",</span><br><span class="line">    "nickname": "fwest",</span><br><span class="line">    "last_logined_time": "2018-05-29 04:56:43",</span><br><span class="line">    "created_at": "2018-06-16 17:55:55",</span><br><span class="line">    "updated_at": "2018-06-16 17:55:55"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以返回一个响应实体为空的 <code>HTTP Response</code> 如：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">201</span> Created</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html; charset=UTF-8</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 09:12:20 GMT</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br></pre></td></tr></table></figure><blockquote><p>这里我们 <code>应该</code> 采用第二种方式，因为大多数情况下，客户端只需要知道该请求操作成功与否，并不需要返回新资源的信息。</p></blockquote><h3 id="202-Accepted"><a href="#202-Accepted" class="headerlink" title="202 Accepted"></a>202 Accepted</h3><p>该状态码表示服务器已经接受到了来自客户端的请求，但还未开始处理。常用短信发送、邮件通知、模板消息推送等这类很耗时需要队列支持的场景中；</p><blockquote><p>返回该状态码时，响应实体 <code>必须</code> 为空。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 202 Accepted</span><br><span class="line">Server: nginx/1.11.9</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Date: Sun, 24 Jun 2018 09:25:15 GMT</span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure><h3 id="204-No-Content"><a href="#204-No-Content" class="headerlink" title="204 No Content"></a>204 No Content</h3><p>该状态码表示响应实体不包含任何数据，其中：</p><ul><li>在使用 <code>DELETE</code> 方法删除资源 <strong>成功</strong> 时，<code>必须</code> 返回该状态码</li><li>使用 <code>PUT</code>、<code>PATCH</code> 方法更新数据 <strong>成功</strong> 时，也 <code>应该</code> 返回此状态码</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">204</span> No Content</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 09:29:12 GMT</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br></pre></td></tr></table></figure><h3 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx 重定向"></a>3xx 重定向</h3><p>所有 <code>API</code> <code>不该</code> 返回 <code>3xx</code> 类型的状态码。因为 <code>3xx</code> 类型的响应格式一般为下列格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 302 Found</span><br><span class="line">Server: nginx/1.11.9</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Cache-Control: no-cache, private</span><br><span class="line">Date: Sun, 24 Jun 2018 09:41:50 GMT</span><br><span class="line">Location: https://example.com</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"0;url=https://example.com"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Redirecting to https://example.com<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        Redirecting to <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://example.com"</span>&gt;</span>https://example.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所有 <code>API</code> <code>一定不可</code> 返回纯 <code>HTML</code> 结构的响应；若一定要使用重定向功能，<code>可以</code> 返回一个响应实体为空的 <code>3xx</code> 响应，并在响应头中加上 <code>Location</code> 字段:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">302</span> Found</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html; charset=UTF-8</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 09:52:50 GMT</span><br><span class="line"><span class="attribute">Location</span>: https://godruoyi.com</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br></pre></td></tr></table></figure><h3 id="400-Bad-Request"><a href="#400-Bad-Request" class="headerlink" title="400 Bad Request"></a>400 Bad Request</h3><p>由于明显的客户端错误（例如，请求语法格式错误、无效的请求、无效的签名等），服务器 <code>应该</code> 放弃该请求。</p><blockquote><p>当服务器无法从其他 4xx 类型的状态码中找出合适的来表示错误类型时，都 <code>必须</code> 返回该状态码。</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">400</span> Bad Request</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache, private</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 13:22:36 GMT</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;"error_code":40000,"message":"无效的签名"&#125;</span><br></pre></td></tr></table></figure><h3 id="401-Unauthorized"><a href="#401-Unauthorized" class="headerlink" title="401 Unauthorized"></a>401 Unauthorized</h3><p>该状态码表示当前请求需要身份认证，以下情况都 <code>必须</code> 返回该状态码。</p><ul><li>未认证用户访问需要认证的 API</li><li>access_token 无效/过期</li></ul><blockquote><p>客户端在收到 <code>401</code> 响应后，都 <code>应该</code> 提示用户进行下一步的登录操作。</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">401</span> Unauthorized</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">WWW-Authenticate</span>: JWTAuth</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache, private</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 13:17:02 GMT</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;"message":"Token Signature could not be verified.","error_code": "40100"&#125;</span><br></pre></td></tr></table></figure><h3 id="403-Forbidden"><a href="#403-Forbidden" class="headerlink" title="403 Forbidden"></a>403 Forbidden</h3><p>该状态码可以简单的理解为没有权限访问该请求，服务器收到请求但拒绝提供服务。</p><p>如当普通用户请求操作管理员用户时，<code>必须</code> 返回该状态码。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">403</span> Forbidden</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache, private</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 13:05:34 GMT</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;"error_code":40301,"message":"权限不足"&#125;</span><br></pre></td></tr></table></figure><h3 id="404-Not-Found"><a href="#404-Not-Found" class="headerlink" title="404 Not Found"></a>404 Not Found</h3><p>该状态码表示用户请求的资源不存在，如</p><ul><li>获取不存在的用户信息 （get /users/9999999）</li><li>访问不存在的端点</li></ul><p>都 <code>必须</code> 返回该状态码，若该资源已永久不存在，则 <code>应该</code> 返回 <code>410</code> 响应。</p><h3 id="405-Method-Not-Allowed"><a href="#405-Method-Not-Allowed" class="headerlink" title="405 Method Not Allowed"></a>405 Method Not Allowed</h3><p>当客户端使用的 <code>HTTP</code> 请求方法不被服务器允许时，<code>必须</code> 返回该状态码。</p><blockquote><p>如客户端调用了 <code>POST</code> 方法来访问只支持 GET 方法的 API</p></blockquote><p>该响应 <code>必须</code> 返回一个 <code>Allow</code> 头信息用以表示出当前资源能够接受的请求方法的列表。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">405</span> Method Not Allowed</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Allow</span>: GET, HEAD</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache, private</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 12:30:57 GMT</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;"message":"405 Method Not Allowed","error_code": 40500&#125;</span><br></pre></td></tr></table></figure><h3 id="406-Not-Acceptable"><a href="#406-Not-Acceptable" class="headerlink" title="406 Not Acceptable"></a>406 Not Acceptable</h3><p><code>API</code> 在不支持客户端指定的数据格式时，应该返回此状态码。如支持 <code>JSON</code> 和 <code>XML</code> 输出的 <code>API</code> 被指定返回 <code>YAML</code> 格式的数据时。</p><blockquote><p>Http 协议一般通过请求首部的 Accept 来指定数据格式</p></blockquote><h3 id="408-Request-Timeout"><a href="#408-Request-Timeout" class="headerlink" title="408 Request Timeout"></a>408 Request Timeout</h3><p>客户端请求超时时 <code>必须</code> 返回该状态码，需要注意的时，该状态码表示 <strong>客户端请求超时</strong>，在涉及第三方 <code>API</code> 调用超时时，<code>一定不可</code> 返回该状态码。</p><h3 id="409-Confilct"><a href="#409-Confilct" class="headerlink" title="409 Confilct"></a>409 Confilct</h3><p>该状态码表示因为请求存在冲突无法处理。如通过手机号码提供注册功能的 <code>API</code>，当用户提交的手机号已存在时，<code>必须</code> 返回此状态码。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">409</span> Conflict</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache, private</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 12:19:04 GMT</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;"error_code":40900,"message":"手机号已存在"&#125;</span><br></pre></td></tr></table></figure><h3 id="410-Gone"><a href="#410-Gone" class="headerlink" title="410 Gone"></a>410 Gone</h3><p>和 <code>404</code> 类似，该状态码也表示请求的资源不存在，只是 <code>410</code> 状态码进一步表示所请求的资源已不存在，并且未来也不会存在。在收到 <code>410</code> 状态码后，客户端 <code>应该</code> 停止再次请求该资源。</p><h3 id="413-Request-Entity-Too-Large"><a href="#413-Request-Entity-Too-Large" class="headerlink" title="413 Request Entity Too Large"></a>413 Request Entity Too Large</h3><p>该状态码表示服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。</p><blockquote><p>此种情况下，服务器可以关闭连接以免客户端继续发送此请求。</p></blockquote><p>如果这个状况是临时的，服务器 <code>应该</code> 返回一个 <code>Retry-After</code> 的响应头，以告知客户端可以在多少时间以后重新尝试。</p><h3 id="414-Request-URI-Too-Long"><a href="#414-Request-URI-Too-Long" class="headerlink" title="414 Request-URI Too Long"></a>414 Request-URI Too Long</h3><p>该状态码表示请求的 <code>URI</code> 长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。</p><h3 id="415-Unsupported-Media-Type"><a href="#415-Unsupported-Media-Type" class="headerlink" title="415 Unsupported Media Type"></a>415 Unsupported Media Type</h3><p>通常表示服务器不支持客户端请求首部 <code>Content-Type</code> 指定的数据格式。如在只接受 <code>JSON</code> 格式的 <code>API</code> 中放入 <code>XML</code> 类型的数据并向服务器发送，都 <code>应该</code> 返回该状态码。</p><p>该状态码也可用于如：只允许上传图片格式的文件，但是客户端提交媒体文件非法或不是图片类型，这时 <code>应该</code> 返回该状态码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">415</span> Unsupported Media Type</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache, private</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 12:09:40 GMT</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;"error_code":41500,"message":"不允许上传的图片格式"&#125;</span><br></pre></td></tr></table></figure><h3 id="429-Too-Many-Requests"><a href="#429-Too-Many-Requests" class="headerlink" title="429 Too Many Requests"></a>429 Too Many Requests</h3><p>该状态码表示用户请求次数超过允许范围。如 <code>API</code> 设定为 <code>60次/分钟</code>，当用户在一分钟内请求次数超过 60 次后，都 <code>应该</code> 返回该状态码。并且也 <code>应该</code> 在响应首部中加上下列头部：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">X-RateLimit-Limit: 10 请求速率（由应用设定，其单位一般为小时/分钟等，这里是 10次/5分钟）</span><br><span class="line">X-RateLimit-Remaining: 0 当前剩余的请求数量</span><br><span class="line">X-RateLimit-Reset: 1529839462 重置时间</span><br><span class="line">Retry-After: 120 下一次访问应该等待的时间（秒）</span><br></pre></td></tr></table></figure><p>列子</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">429</span> Too Many Requests</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">X-RateLimit-Limit</span>: 10</span><br><span class="line"><span class="attribute">X-RateLimit-Remaining</span>: 0</span><br><span class="line"><span class="attribute">X-RateLimit-Reset</span>: 1529839462</span><br><span class="line"><span class="attribute">Retry-After</span>: 290</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache, private</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 11:19:32 GMT</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;"message":"You have exceeded your rate limit.","error_code":42900&#125;</span><br></pre></td></tr></table></figure><p><code>必须</code> 为所有的 API 设置 Rate Limit 支持。</p><h3 id="500-Internal-Server-Error"><a href="#500-Internal-Server-Error" class="headerlink" title="500 Internal Server Error"></a>500 Internal Server Error</h3><p>该状态码 <code>必须</code> 在服务器出错时抛出，对于所有的 <code>500</code> 错误，都 <code>应该</code> 提供完整的错误信息支持，也方便跟踪调试。</p><h3 id="503-Service-Unavailable"><a href="#503-Service-Unavailable" class="headerlink" title="503 Service Unavailable"></a>503 Service Unavailable</h3><p>该状态码表示服务器暂时处理不可用状态，当服务器需要维护或第三方 <code>API</code> 请求超时/不可达时，都 <code>应该</code> 返回该状态码，其中若是主动关闭 API 服务，<code>应该</code>在返回的响应首部加上 <code>Retry-After</code> 头部，表示多少秒后可以再次访问。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">503</span> Service Unavailable</span><br><span class="line"><span class="attribute">Server</span>: nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache, private</span><br><span class="line"><span class="attribute">Date</span>: Sun, 24 Jun 2018 10:56:20 GMT</span><br><span class="line"><span class="attribute">Retry-After</span>: 60</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;"error_code":50300,"message":"服务维护中"&#125;</span><br></pre></td></tr></table></figure><p>其他 <code>HTTP</code> 状态码请参考 <a href="https://zh.wikipedia.org/zh-hans/HTTP%E7%8A%B6%E6%80%81%E7%A0%81" target="_blank" rel="noopener">HTTP 状态码- 维基百科</a>。</p><h2 id="建议参考"><a href="#建议参考" class="headerlink" title="建议参考"></a>建议参考</h2><p><a href="https://github.com/aisuhua/restful-api-design-references" target="_blank" rel="noopener">restful-api-design-references</a></p><p><a href="http://www.cnblogs.com/moonz-wu/p/4211626.html" target="_blank" rel="noopener">Principles of good RESTful API Design（译）</a></p><p><a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="noopener">理解 RESTful 架构</a></p><p><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">RESTful API 设计指南</a></p><p><a href="https://zh.wikipedia.org/zh-hans/HTTP%E7%8A%B6%E6%80%81%E7%A0%81" target="_blank" rel="noopener">HTTP 状态码- 维基百科</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章主要记录目前比较流行的 &lt;code&gt;RESTful api&lt;/code&gt; 设计规范，为后续开发各种平台提供接口设计规范。&lt;/p&gt;
    
    </summary>
    
    
      <category term="后台技术" scheme="https://william-hl1991.github.io/categories/%E5%90%8E%E5%8F%B0%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="后台开发" scheme="https://william-hl1991.github.io/tags/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    
      <category term="接口开发" scheme="https://william-hl1991.github.io/tags/%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS内存泄露原因分析</title>
    <link href="https://william-hl1991.github.io/2018/08/10/iOS%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/"/>
    <id>https://william-hl1991.github.io/2018/08/10/iOS%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/</id>
    <published>2018-08-10T05:18:05.000Z</published>
    <updated>2020-04-22T06:54:19.411Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;去年大致同期就研究过<a href="http://wereadteam.github.io/2016/07/20/MLeaksFinder2/" target="_blank" rel="noopener">MLeaksFinder</a>和<a href="https://github.com/facebook/FBRetainCycleDetector" target="_blank" rel="noopener">FBRetainCycleDetector</a>两个关于iOS内存泄漏的监控工具。前者的思路是：通常一个 UIViewController 在被 pop 之后将会很快被释放，假设在 pop 3 秒钟之后仍然没有被释放，则可以认为这个 UIViewController 存在泄漏的问题。在后续的更新版本中，MLeaksFinder 也依赖了 Facebook 的FBRetainCycleDetector来辅助判断内存泄漏是否是由循环引用引起的。后者的原理是在 Objective-C 中检测循环引用可以抽象为在一个节点为对象，边为对象之间的引用关系的有向无环图（DAG 图）中寻找存在的环。当所有的 Objective-C 对象已经在我们的有向无环图中时，我们所需要做的就是通过深度优先搜索算法来遍历它，并找到循环节点。关于FBRetainCycleDetector的详细解释实践参考该博客<a href="https://draveness.me/retain-cycle1" target="_blank" rel="noopener">《如何在 iOS 中解决循环引用的问题》</a>。</p><a id="more"></a><h1 id="内存泄漏和内存溢出"><a href="#内存泄漏和内存溢出" class="headerlink" title="内存泄漏和内存溢出"></a>内存泄漏和内存溢出</h1><ol><li>内存溢出(out of memory)： 是指程序在申请内存时，没有足够的内存空间供其使用，出现out of memory。通俗理解就是内存不够。例如在运行大型软件或游戏时，软件或游戏所需要的内存远远超出了你主机内安装的内存所承受大小，就叫内存溢出。</li><li>内存泄漏(memory leak)： 是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存，到最后都会被消耗完，产生闪退。</li></ol><h1 id="排查内存泄漏"><a href="#排查内存泄漏" class="headerlink" title="排查内存泄漏"></a>排查内存泄漏</h1><p>&ensp;&ensp;iOS开发中对内存管理的要求非常严格，一旦存在内存泄漏，很容易导致程序非常容易崩溃。尽管目前iOS开发基本上都是采用的ARC方式进行内存管理，但是稍不注意就会存在内存泄漏的问题。简单的定位内存泄漏的问题可以采用：静态分析方法（Analyze）和动态分析方法（Instrument的leak）。</p><h2 id="1-1-静态分析方法"><a href="#1-1-静态分析方法" class="headerlink" title="1.1 静态分析方法"></a>1.1 静态分析方法</h2><p>&ensp;&ensp;通过xcode自带的Analyze进行静态内存泄露分析。静态分析方法能发现大部分的问题，但是只能是静态分析结果，还有一些动态分配内存的情形并没有进行分析。所以仅仅使用静态内存泄漏分析得到的结果并不是非常可靠。</p><h2 id="1-2-动态内存泄露分析方法"><a href="#1-2-动态内存泄露分析方法" class="headerlink" title="1.2 动态内存泄露分析方法"></a>1.2 动态内存泄露分析方法</h2><p>&ensp;&ensp;分析内存泄露不能把所有的内存泄露查出来，有的内存泄露是在运行时，用户操作时才产生的。在Instruments中选择Leaks工具选项，由于leaks是动态监测，所以手动进行一系列操作，可检查项目中是否存在内存泄漏问题。选中Leaks Checks,在Details所在栏中选择CallTree,并且在右下角勾选Invert Call Tree 和Hide System Libraries，会发现显示若干行代码，双击即可跳转到出现内存泄漏的地方。</p><h2 id="1-3-覆盖不完全"><a href="#1-3-覆盖不完全" class="headerlink" title="1.3 覆盖不完全"></a>1.3 覆盖不完全</h2><p>&ensp;&ensp;在 MRC 时代 Leaked memory 很常见，因为很容易忘了调用 release，但在 ARC 时代更常见的内存泄露是循环引用导致的 Abandoned memory，Leaks 工具查不出这类内存泄露，应用有限。</p><blockquote><p>WeRead在MLeaksFinder：精准 iOS 内存泄露检测工具中对Allocations做了总结：不断重复 push 和 pop 同一个 UIViewController，理论上来说，push 之前跟 pop 之后，app 会回到相同的状态。因此，在 push 过程中新分配的内存，在 pop 之后应该被 dealloc 掉，除了前几次 push 可能有预热数据和 cache 数据的情况。如果在数次 push 跟 pop 之后，内存还不断增长，则有内存泄露。用这种方法来发现内存泄露还是很不方便的：  </p><ul><li>首先，你得打开 Allocations  </li><li>其次，你得一个个场景去重复的操作,无法及时得知泄露，得专门做一遍上述操作，十分繁琐</li></ul></blockquote><h1 id="内存泄露的原因分析"><a href="#内存泄露的原因分析" class="headerlink" title="内存泄露的原因分析"></a>内存泄露的原因分析</h1><h2 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h2><p>&ensp;&ensp;Objective-C 使用引用计数来管理内存与释放未被引用的对象。内存中的对象 A 可以让对象 B 的引用计数加一，即 retain，来使对象 B 尽可能久地存在内存中（只要对象 A 不对它“减一”，即 release）。也就是说：对象 A 持有了对象 B 。<br>大多数情况下，引用计数这套机制都可以运作得很好。但是，当两个对象直接地，或者更常见的情形是通过某些对象间接地，互相持有了对方，这个时候就陷入了僵局了。这种互相持有对方的引用的现象叫做循环引用。<br>循环引用会导致一系列的问题。最好的情况是，泄漏的对象本身就会一直长期地占用内存空间，这种情况一般不会造成太大的内存消耗。如果泄漏的对象不停地增加与积累，那么 App 中其他功能模块所能使用的内存就会减少。最坏的情况则是，内存泄漏导致了 App 需要使用的内存超出了限制，这时应用就会闪退了。</p><h2 id="UIViewController是否dismiss"><a href="#UIViewController是否dismiss" class="headerlink" title="UIViewController是否dismiss"></a>UIViewController是否dismiss</h2><p>&ensp;&ensp;当一个 UIViewController 被 pop 或 dismiss 后，该 UIViewController 包括它的 view，view 的 subviews 等等将很快被释放。于是，我们只需在一个 ViewController 被 pop 或 dismiss 一小段时间后，看看该 UIViewController，它的 view，view 的 subviews 等等是否还存在。</p><h2 id="ViewController中存在NSTimer"><a href="#ViewController中存在NSTimer" class="headerlink" title="ViewController中存在NSTimer"></a>ViewController中存在NSTimer</h2><p>&ensp;&ensp;如果你的ViewController中有NSTimer，那么你就要注意了，因为当你调用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(updateTime:) userInfo:nil repeats:YES];</span><br></pre></td></tr></table></figure><p>上面代码中的target：self就增加了ViewController的return count，如果你不将这个timer invalidate，将别想调用dealloc。</p><h2 id="ViewController中的代理delegate"><a href="#ViewController中的代理delegate" class="headerlink" title="ViewController中的代理delegate"></a>ViewController中的代理delegate</h2><p>&ensp;&ensp;一个比较隐秘的因素，你去找找与这个类有关的代理，有没有强引用属性。如果你这个VC需要外部传某个Delegate进来，来通过Delegate+protocol的方式传参数给其他对象，那么这个delegate一定不要强引用，尽量assign或者weak，否则你的VC会持续持有这个delegate，直到它自身被释放。</p><h2 id="ViewController中Block"><a href="#ViewController中Block" class="headerlink" title="ViewController中Block"></a>ViewController中Block</h2><p>&ensp;&ensp;这个可能就是经常容易犯的一个问题了，Block体内使用实例变量也会造成循环引用，使得拥有这个实例的对象不能释放。因为该block本来就是当前viewcontroller的一部分，现在盖子部门又强引用self，导致循环引用无法释放。 例如你这个类叫OneViewController,有个属性是NSString name; 如果你在block体中使用了self.name，或者_name，那样子的话这个类就没法释放。 要解决这个问题其实很简单，就是在block之前申明当前的self引用为弱引用即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; MRC下代码如下</span><br><span class="line">__block Viewcontroller weakSelf &#x3D; self;</span><br><span class="line">&#x2F;&#x2F; ARC下代码如下</span><br><span class="line">__weak Viewcontroller *weakSelf &#x3D; self;</span><br></pre></td></tr></table></figure><h2 id="ViewController的子视图对self的持有"><a href="#ViewController的子视图对self的持有" class="headerlink" title="ViewController的子视图对self的持有"></a>ViewController的子视图对self的持有</h2><p>&ensp;&ensp;这个问题也是我们的项目中内存泄漏的问题所在。有时候需要在子视图或者某个cell中点击跳转等操作，需要在子视图或cell中持有当前的ViewController对象，这样跳转之后的back键才能直接返回该页面，同时也不销毁当前ViewController。此时，你就要注意在子视图或者cell中对当前页面的持有对象不能是强引用，尽量assign或者weak，否则会造成循环引用，内存无法释放。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp;&amp;ensp;去年大致同期就研究过&lt;a href=&quot;http://wereadteam.github.io/2016/07/20/MLeaksFinder2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MLeaksFinder&lt;/a&gt;和&lt;a href=&quot;https://github.com/facebook/FBRetainCycleDetector&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FBRetainCycleDetector&lt;/a&gt;两个关于iOS内存泄漏的监控工具。前者的思路是：通常一个 UIViewController 在被 pop 之后将会很快被释放，假设在 pop 3 秒钟之后仍然没有被释放，则可以认为这个 UIViewController 存在泄漏的问题。在后续的更新版本中，MLeaksFinder 也依赖了 Facebook 的FBRetainCycleDetector来辅助判断内存泄漏是否是由循环引用引起的。后者的原理是在 Objective-C 中检测循环引用可以抽象为在一个节点为对象，边为对象之间的引用关系的有向无环图（DAG 图）中寻找存在的环。当所有的 Objective-C 对象已经在我们的有向无环图中时，我们所需要做的就是通过深度优先搜索算法来遍历它，并找到循环节点。关于FBRetainCycleDetector的详细解释实践参考该博客&lt;a href=&quot;https://draveness.me/retain-cycle1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《如何在 iOS 中解决循环引用的问题》&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://william-hl1991.github.io/categories/iOS/"/>
    
    
      <category term="iOS技术 - iOS - 内存" scheme="https://william-hl1991.github.io/tags/iOS%E6%8A%80%E6%9C%AF-iOS-%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>使用iOS诊断进行iOS电量测试</title>
    <link href="https://william-hl1991.github.io/2018/03/01/%E4%BD%BF%E7%94%A8iOS%E8%AF%8A%E6%96%AD%E8%BF%9B%E8%A1%8CiOS%E7%94%B5%E9%87%8F%E6%B5%8B%E8%AF%95/"/>
    <id>https://william-hl1991.github.io/2018/03/01/%E4%BD%BF%E7%94%A8iOS%E8%AF%8A%E6%96%AD%E8%BF%9B%E8%A1%8CiOS%E7%94%B5%E9%87%8F%E6%B5%8B%E8%AF%95/</id>
    <published>2018-03-01T05:18:05.000Z</published>
    <updated>2020-04-22T09:56:12.555Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;长久以来iOS上的电量测试相关信息都是很单一，唯一能获取电量详细信息的私有接口也在iOS9中被苹果官方封掉了。传统方案获取电量的路几乎在新的系统版本下被堵死，使得我们不得不寻求新的电量获取方式。</p><a id="more"></a><h1 id="什么是iOS-Diagnostics"><a href="#什么是iOS-Diagnostics" class="headerlink" title="什么是iOS Diagnostics"></a>什么是iOS Diagnostics</h1><p>&ensp;&ensp;iOS diagnostics 是iOS本身自带的诊断系统，在这个诊断系统中包含电量的相关信息记录，这些信息以Sqlite的形式保存，并定期传给苹果服务器，以供苹果相关人员分析。由此可以通过读取iOS系统记录的数据来进行电量测试，这个数据由iOS系统提供，并且记录了每个app的耗电量，故可以得到比较准确的耗电量信息。</p><h1 id="如何通过诊断测试具体的耗电量"><a href="#如何通过诊断测试具体的耗电量" class="headerlink" title="如何通过诊断测试具体的耗电量"></a>如何通过诊断测试具体的耗电量</h1><p>测试过程中需要注意的点</p><ul><li><p>为保证测试的准确性尽量不要开启其他应用（系统应用除外）</p></li><li><p>记录下操作时间和对应的业务场景（用于还原业务对应的耗电量）</p></li><li><p>最好使用iOS10及以上的设备（便于收集电量数据）</p><h2 id="iOS10及以上的设备"><a href="#iOS10及以上的设备" class="headerlink" title="iOS10及以上的设备"></a>iOS10及以上的设备</h2></li></ul><ol><li>使用开发者账号下载profile证书，<a href="https://developer.apple.com/services-account/download?path=/iOS/iOS_Logs/BatteryLife.mobileconfig" target="_blank" rel="noopener">链接</a>。通过Airdrop安装到手机上。<ol start="2"><li>正常进行测试，记录下业务场景对应时间点。</li><li>静置半个小时左右，通过iTunes同步到电脑。<br>在电脑上对应的目录如下：</li></ol></li></ol><p><code>macos:~/Library/Logs/CrashReporter/MobileDevice/[Your_Device_Name]/</code></p><p><code>Windows:C:\Users\[Your_User_Name]\AppData\Roaming\AppleComputer\Logs\CrashReporter\MobileDevice\ [Your_Device_Name]\</code></p><ol start="4"><li>电量数据库以”Powerlog_”开头，以”.PLSQL”<br>或者”.PLSQL.gz”结尾。</li></ol><h2 id="iOS10以下的设备"><a href="#iOS10以下的设备" class="headerlink" title="iOS10以下的设备"></a>iOS10以下的设备</h2><p>提供一个思路：可以通过 mitmproxy + diags://123456拦截接口的形式获得，接口：<a href="https://iosdiags.apple.com/ios/TestConfiguration/1.2" target="_blank" rel="noopener">https://iosdiags.apple.com/ios/TestConfiguration/1.2</a></p><h1 id="电量数据库的解读与分析"><a href="#电量数据库的解读与分析" class="headerlink" title="电量数据库的解读与分析"></a>电量数据库的解读与分析</h1><style><br>table tr:hover {<br>    background: #efefef;<br>}<br>table td:nth-child(1) {<br>    word-wrap:break-word;<br>}<br>table td:nth-child(2) {<br>    word-wrap:break-word;<br>}<br>table td:nth-child(3) {<br>    word-wrap:break-word;<br>}<br></style><table><thead><tr><th>表名</th><th>记录内容</th><th>使用意义</th></tr></thead><tbody><tr><td>PLAccountingOperator_EventNone_Nodes</td><td>记录了所有应用的noteID</td><td>得到系统应用和安装应用</td></tr><tr><td>PLAccountingOperator_Aggregate_RootNodeEnergy</td><td>记录了每个noteID的电量消耗</td><td>统计各个引用的耗电量</td></tr><tr><td>PLAppTimeService_Aggregate_AppRunTime</td><td>记录了app的运行状态，一小时记录一次</td><td>找到被测应用的运行时间段</td></tr><tr><td>PLBatteryAgent_EventBackward_Battery</td><td>记录了整机的电量变化，20秒记录一次（电压、电流、温度等等</td><td>详细电量的统计来源</td></tr><tr><td>PLIOReportAgent_EventBackward_EnergyModel</td><td>记录了IO相关的电量消耗（SoC、DRAM、IPS等等）</td><td>系统底层硬件的耗电量</td></tr><tr><td>PLSpringBoardAgent_Aggregate_SBNotifications_Aggregat</td><td>记录了推送通知的时间和数量</td><td>推送对耗电的影响</td></tr><tr><td>PLLocationAgent_EventForward_ClientStatus</td><td>定位的相关信息</td><td>定位信息对耗电的影响</td></tr></tbody></table><p>综合上面的表数据库我们可以精确获取到app在某个时间段的电量消耗，一次记录下操作场景的时间段，之后通过读取数据库的数据，就可以精确获取该场景在该机器上的电量消耗情况。</p><p>通过PLAppTimeService_Aggregate_AppRunTim 表获取到app的运行情况，然后根据app运行的情况PLAccountingOperator_Aggregate_RootNodeEne这个表获取到app的电量消耗情况。依据这里的耗电情况算出每个部分的耗电百分比，然后通过PLBatteryAgent_EventBackward_Battery可以获得此事件的详细耗电量（公式：W=UIt）。</p><h1 id="iOS诊断耗电量测试总结"><a href="#iOS诊断耗电量测试总结" class="headerlink" title="iOS诊断耗电量测试总结"></a>iOS诊断耗电量测试总结</h1><p>首先装上对应的system debug证书，然后开始执行日常测试，记录下哪个时间段对应的是哪个场景，执行测试完成后，取下系统的电量数据库，对该次测试的各个场景的耗电量做一个全面的评价。</p><h1 id="电量优化的方案"><a href="#电量优化的方案" class="headerlink" title="电量优化的方案"></a>电量优化的方案</h1><h4 id="1-合理使用NSDateFormatter-和-NSCalendar这种高开销对象"><a href="#1-合理使用NSDateFormatter-和-NSCalendar这种高开销对象" class="headerlink" title="1. 合理使用NSDateFormatter 和 NSCalendar这种高开销对象"></a>1. 合理使用NSDateFormatter 和 NSCalendar这种高开销对象</h4><p>&ensp;&ensp;性能测试表明，NSDateFormatter的性能瓶颈是由于NSDate格式到NSString格式的转化，所以把NSDateFormatter创建单例意义不大。推荐的做法是，把最常用到的日期格式做缓存。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">static NSDateFormatter *cachedDateFormatter &#x3D;nil;</span><br><span class="line"> + (NSDateFormatter *)cachedDateFormatter &#123;</span><br><span class="line">     if(!dateFormatter)&#123;</span><br><span class="line">       dateFormatter &#x3D; [[NSDateFormatter alloc] init];</span><br><span class="line">       [dateFormatter setDateFormat: @“YYYY-MM-dd HH:mm:ss”];</span><br><span class="line">     &#125;</span><br><span class="line">     return dataFormatter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-不要频繁的刷新页面，尽量不要使用reloadData。"><a href="#2-不要频繁的刷新页面，尽量不要使用reloadData。" class="headerlink" title="2. 不要频繁的刷新页面，尽量不要使用reloadData。"></a>2. 不要频繁的刷新页面，尽量不要使用reloadData。</h4><h4 id="3-图片处理"><a href="#3-图片处理" class="headerlink" title="3. 图片处理"></a>3. 图片处理</h4><ul><li>图片与imageView相同大小，避免多余运算</li><li>可以使用整幅的图片，增加应用体积，但是节省CPU消耗</li><li>可调整大小的图片，可以省去一些不必要的空间</li><li>CALayer,CoreGraphics,甚至OpenGL来绘制，消耗CPU<h4 id="4-选择正确的集合"><a href="#4-选择正确的集合" class="headerlink" title="4. 选择正确的集合"></a>4. 选择正确的集合</h4></li><li>NSArray，使用index来查找很快（插入和删除很慢）</li><li>字典，使用键来查找很快</li><li>NSSets，是无序的，用键查找很快，插入/删除很快<h4 id="5-懒加载，不要一次性创建所有的subview，而是需要时才创建"><a href="#5-懒加载，不要一次性创建所有的subview，而是需要时才创建" class="headerlink" title="5. 懒加载，不要一次性创建所有的subview，而是需要时才创建"></a>5. 懒加载，不要一次性创建所有的subview，而是需要时才创建</h4><h4 id="6-进行必要的缓存"><a href="#6-进行必要的缓存" class="headerlink" title="6. 进行必要的缓存"></a>6. 进行必要的缓存</h4><h4 id="7-尽量减少透明或者半透明，会产生额外的运算"><a href="#7-尽量减少透明或者半透明，会产生额外的运算" class="headerlink" title="7. 尽量减少透明或者半透明，会产生额外的运算"></a>7. 尽量减少透明或者半透明，会产生额外的运算</h4></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp;&amp;ensp;长久以来iOS上的电量测试相关信息都是很单一，唯一能获取电量详细信息的私有接口也在iOS9中被苹果官方封掉了。传统方案获取电量的路几乎在新的系统版本下被堵死，使得我们不得不寻求新的电量获取方式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://william-hl1991.github.io/categories/iOS/"/>
    
    
      <category term="iOS技术 - iOS - 电量" scheme="https://william-hl1991.github.io/tags/iOS%E6%8A%80%E6%9C%AF-iOS-%E7%94%B5%E9%87%8F/"/>
    
  </entry>
  
</feed>
